postscript("font_plot.eps", family="Times New Roman", width=4, height=4)
plot(mtcars$mpg, mtcars$wt,
main = "Fuel Efficiency of 32 Cars",
xlab = "Weight (x1000 lb)",
ylab = "Miles per Gallon")
postscriptFonts()
pdf("plot_garamond.pdf", family="Garamond", width=4, height=4.5)
plot(mtcars$mpg, mtcars$wt,
main = "Fuel Efficiency of 32 Cars",
xlab = "Weight (x1000 lb)",
ylab = "Miles per Gallon")
dev.off()
pdf("plot_garamond.pdf", family="Arial", width=4, height=4.5)
plot(mtcars$mpg, mtcars$wt,
main = "Fuel Efficiency of 32 Cars",
xlab = "Weight (x1000 lb)",
ylab = "Miles per Gallon")
dev.off()
loadfonts(device="postscript")
postscript("plot_garamond.ps", family="Arial", width=4, height=4.5)
plot(mtcars$mpg, mtcars$wt,
main = "Fuel Efficiency of 32 Cars",
xlab = "Weight (x1000 lb)",
ylab = "Miles per Gallon")
dev.off()
postscript("plot_garamond.ps", family="Times New Roman", width=4, height=4.5)
plot(mtcars$mpg, mtcars$wt,
main = "Fuel Efficiency of 32 Cars",
xlab = "Weight (x1000 lb)",
ylab = "Miles per Gallon")
dev.off()
postscript("plot_garamond.ps", family="Courier New", width=4, height=4.5)
plot(mtcars$mpg, mtcars$wt,
main = "Fuel Efficiency of 32 Cars",
xlab = "Weight (x1000 lb)",
ylab = "Miles per Gallon")
dev.off()
postscript("plot_garamond.ps", family="Arial Narrow", width=4, height=4.5)
plot(mtcars$mpg, mtcars$wt,
main = "Fuel Efficiency of 32 Cars",
xlab = "Weight (x1000 lb)",
ylab = "Miles per Gallon")
dev.off()
history(100)
0.3*0.7*100
sqrt((0.3*0.7)/(100))
shiny::runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
hist(rgamma(10000,100,1))
?rbeta
0.016*(1-0.016)
0.016*(1-0.016)/0.01
0.016*(1-0.016)/0.001
0.016*(1-0.016)/0.0001
0.016*(1-0.016)/0.002
s<-0.016
s*(1-s)/(0.1*s)
s*(1-s)/(0.01*s)
s<-0.5
s*(1-s)/(0.01*s)
s<-0.01
s*(1-s)/(0.01*s)
s*(1-s)/(0.001*s)
s*(1-s)/(0.02*s)
s*(1-s)/(0.005*s)
s*(1-s)/(0.009*s)
s<-0.4
s*(1-s)/(0.009*s)
s*(1-s)/((0.01*s)^2)
s*(1-s)/((0.1*s)^2)
s*(1-s)/((0.2*s)^2)
hist(1/sqrt(rgamma(10000,100,1)))
hist(9/sqrt(rgamma(10000,100,1)))
hist(4/sqrt(rgamma(10000,100,1)))
hist(3/sqrt(rgamma(10000,100,1)))
fecundity<-c(0.47,0.61,0.46,0.44,0.48,0.46,0.65,0.42,0.70,0.62,0.46)
mean(fecundity)
variance(fecundity)
var(fecundity)
(mean(fecundity)*(1-mean(fecundity)))/var(fecundity)
survival<-c(0.636,0.848,0.891,0.712,0.792,0.883,0.715,0.763,0.837,0.815)
(mean(survival)*(1-mean(survival)))/var(survival)
?rgamma
phi_vals<-rgamma(1000,100,1)
hist(rbeta(1000,0.016*phi_vals[1]),(1-0.16)*phi_vals[1])
hist(rbeta(1000,0.016*phi_vals[1],(1-0.16)*phi_vals[1]))
hist(rbeta(1000,0.016*phi_vals[2],(1-0.16)*phi_vals[2]))
data<-c()
for (i in 1:100)
{
data<-c(data,rbeta(100,0.016*phi_vals[i],(1-0.16)*phi_vals[i])
}
hist(data)
data<-c()
for (i in 1:100)
{
data<-c(data,rbeta(100,0.016*phi_vals[i],(1-0.16)*phi_vals[i]))
}
hist(data)
data<-c()
for (i in 1:1000)
{
data<-c(data,rbeta(100,0.016*phi_vals[i],(1-0.16)*phi_vals[i]))
}
hist(data)
data<-c()
for (i in 1:1000)
{
data<-c(data,rbeta(100,0.6*phi_vals[i],(1-0.6)*phi_vals[i]))
}
hist(data)
data<-c()
for (i in 1:1000)
{
data<-c(data,rbeta(100,0.1*phi_vals[i],(1-0.1)*phi_vals[i]))
}
hist(data)
data<-c()
for (i in 1:1000)
{
data<-c(data,rbeta(100,0.2*phi_vals[i],(1-0.2)*phi_vals[i]))
}
hist(data)
data<-c()
for (i in 1:1000)
{
data<-c(data,rbeta(100,0.3*phi_vals[i],(1-0.3)*phi_vals[i]))
}
hist(data)
data<-c()
for (i in 1:1000)
{
data<-c(data,rbeta(100,0.4*phi_vals[i],(1-0.4)*phi_vals[i]))
}
hist(data)
data<-c()
for (i in 1:1000)
{
data<-c(data,rbeta(100,0.5*phi_vals[i],(1-0.5)*phi_vals[i]))
}
hist(data)
phi_vals<-rgamma(1000,25,1)
hist(phi_vals)
data<-c()
for (i in 1:1000)
{
data<-c(data,rbeta(100,0.5*phi_vals[i],(1-0.5)*phi_vals[i]))
}
hist(data)
survival
library(fitdistr)
install.packages("fitdistrplus")
library(fitdistrplus)
fitdist(survival,"beta")
fitdist(fecundity,"beta")
install.packages("timevis")
data <- data.frame(
id      = 1:4,
content = c("Item one"  , "Item two"  ,"Ranged item", "Item four"),
start   = c("2016-01-10", "2016-01-11", "2016-01-20", "2016-02-14 15:00:00"),
end     = c(NA          ,           NA, "2016-02-04", NA)
)
timevis(data)
library(timevis)
data <- data.frame(
id      = 1:4,
content = c("Item one"  , "Item two"  ,"Ranged item", "Item four"),
start   = c("2016-01-10", "2016-01-11", "2016-01-20", "2016-02-14 15:00:00"),
end     = c(NA          ,           NA, "2016-02-04", NA)
)
timevis(data)
shiny::runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
?timevis
data <- data.frame(
id      = 1:4,
content = c("Item one"  , "Item two"  ,"Ranged item", "Item four"),
start   = c("2016-01-10", "2016-01-11", "2016-01-20", "2016-02-14 15:00:00"),
end     = c(NA          ,           NA, "2016-02-04", NA)
)
timevis(data,editable=TRUE)
timevis() %>%
setItems(data.frame(
id = 1:2,
content = c("one", "two"),
start = c("2016-01-10", "2016-01-12")
)) %>%
setOptions(list(editable = TRUE)) %>%
addItem(list(id = 3, content = "three", start = "2016-01-11")) %>%
setSelection("3") %>%
fitWindow(list(animation = FALSE))
timevis() %>%
setItems(data.frame(
id = 1:8,
content = c("Task 1", "Task 2","Task 3","Task 4","Task 5","Task 6","Task 7","Task 8","Task 9","Task 10"),
start = c("2016-01-10", "2016-01-12","2016-01-12","2016-01-12","2016-01-12","2016-01-12","2016-01-12","2016-01-12","2016-01-12","2016-01-12")
)) %>%
setOptions(list(editable = TRUE)) %>%
addItem(list(id = 3, content = "three", start = "2016-01-11")) %>%
setSelection("3") %>%
fitWindow(list(animation = FALSE))
timevis() %>%
setItems(data.frame(
id = 1:8,
content = c("Task 1", "Task 2","Task 3","Task 4","Task 5","Task 6","Task 7","Task 8"),
start = c("2016-01-10", "2016-01-12","2016-01-12","2016-01-12","2016-01-12","2016-01-12","2016-01-12","2016-01-12")
)) %>%
setOptions(list(editable = TRUE)) %>%
fitWindow(list(animation = FALSE))
timevis() %>%
setItems(data.frame(
id = 1:8,
content = c("Task 1: Initial data model assimilation", "Task 2: Incorporating prior classification","Task 3","Task 4","Task 5","Task 6","Task 7","Task 8"),
start = c("2020-01-01", "2016-01-01","2016-01-12","2016-01-12","2016-01-12","2016-01-12","2016-01-12","2016-01-12"),
end = c("2020-05-01", "2016-05-01","2016-01-12","2016-01-12","2016-01-12","2016-01-12","2016-01-12","2016-01-12")
)) %>%
setOptions(list(editable = TRUE)) %>%
fitWindow(list(animation = FALSE))
timevis() %>%
setItems(data.frame(
id = 1:8,
content = c("Task 1: Initial data model assimilation", "Task 2: Incorporating prior classification","Task 3","Task 4","Task 5","Task 6","Task 7","Task 8"),
start = c("2020-01-01", "2020-01-01","2020-01-12","2020-01-12","2020-01-12","2020-01-12","2020-01-12","2020-01-12"),
end = c("2020-05-01", "2020-05-01","2020-01-12","2020-01-12","2020-01-12","2020-01-12","2020-01-12","2020-01-12")
)) %>%
setOptions(list(editable = TRUE)) %>%
fitWindow(list(animation = FALSE))
timevis() %>%
setItems(data.frame(
id = 1:8,
content = c("Task 1: Initial data model assimilation", "Task 2: Incorporating prior classification","Task 3: Incorporating abundance constraint","Task 4: Train CNN","Task 5","Task 6","Task 7","Task 8"),
start = c("2020-01-01", "2020-01-01","2020-04-01","2020-04-01","2020-01-12","2020-01-12","2020-01-12","2020-01-12"),
end = c("2020-05-01", "2020-05-01","2020-06-01","2020-10-01","2020-01-12","2020-01-12","2020-01-12","2020-01-12")
)) %>%
setOptions(list(editable = TRUE)) %>%
fitWindow(list(animation = FALSE))
timevis() %>%
setItems(data.frame(
id = 1:8,
content = c("Task 1: Initial data model assimilation", "Task 2: Incorporating prior classification","Task 3: Incorporating abundance constraint","Task 4: Train CNN","Task 5","Task 6","Task 7","Task 8"),
start = c("2020-01-01", "2020-01-01","2020-04-01","2020-04-01","2020-01-12","2020-01-12","2020-01-12","2020-01-12"),
end = c("2020-05-01", "2020-05-01","2020-06-01","2020-10-01","2020-01-12","2020-01-12","2020-01-12","2020-01-12"),
style = c("red", "blue",NA,NA,NA,NA,NA,NA)
)) %>%
setOptions(list(editable = TRUE)) %>%
fitWindow(list(animation = FALSE))
timevis() %>%
setItems(data.frame(
id = 1:8,
content = c("Task 1: Initial data model assimilation", "Task 2: Incorporating prior classification","Task 3: Incorporating abundance constraint","Task 4: Train CNN","Task 5","Task 6","Task 7","Task 8"),
start = c("2020-01-01", "2020-01-01","2020-04-01","2020-04-01","2020-01-12","2020-01-12","2020-01-12","2020-01-12"),
end = c("2020-05-01", "2020-05-01","2020-06-01","2020-10-01","2020-01-12","2020-01-12","2020-01-12","2020-01-12")
#             style = c("red", "blue",NA,NA,NA,NA,NA,NA)
)) %>%
setOptions(list(editable = TRUE)) %>%
fitWindow(list(animation = FALSE))
timevis() %>%
setItems(data.frame(
id = 1:8,
content = c("Task 1: Initial data model assimilation", "Task 2: Incorporating prior classification","Task 3: Incorporating abundance constraint","Task 4: Train CNN","Task 5","Task 6","Task 7","Task 8"),
start = c("2020-01-01", "2020-01-01","2020-04-01","2020-04-01","2020-01-12","2020-01-12","2020-01-12","2020-01-12"),
end = c("2020-05-01", "2020-05-01","2020-06-01","2020-10-01","2020-01-12","2020-01-12","2020-01-12","2020-01-12")
)) %>%
setOptions(list(editable = TRUE)) %>%
fitWindow(list(animation = FALSE))
timevis() %>%
setItems(data.frame(
id = 1:8,
content = c("Task 1: Initial data model assimilation", "Task 2: Incorporating prior classification","Task 3: Incorporating abundance constraint","Task 4: Train CNN","Task 5","Task 6","Task 7","Task 8"),
start = c("2020-01-01", "2020-01-01","2020-04-01","2020-04-01","2020-01-12","2020-01-12","2020-01-12","2020-01-12"),
end = c("2020-05-01", "2020-05-01","2020-06-01","2020-10-01","2020-01-12","2020-01-12","2020-01-12","2020-01-12")
)) %>%
setOptions(list(editable = FALSE)) %>%
fitWindow(list(animation = FALSE))
timevis() %>%
setItems(data.frame(
id = 1:8,
content = c("Task 1: Initial data model assimilation", "Task 2: Incorporating prior classification","Task 3: Incorporating abundance constraint","Task 4: Train CNN","Task 5: Landsat MSS","Task 6: New sensors","Task 7: Guano product","Task 8: Distribution"),
start = c("2020-01-01", "2020-01-01","2020-04-01","2020-04-01","2020-07-01","2020-10-01","2021-03-01","2021-06-01"),
end = c("2020-05-01", "2020-05-01","2020-06-01","2020-10-01","2020-12-31","2021-03-01","2021-07-01","2021-12-31")
)) %>%
setOptions(list(editable = FALSE)) %>%
fitWindow(list(animation = FALSE))
plot(c(1,2,3,2),c(4,3,4,5))
timevis() %>%
setItems(data.frame(
id = 1:8,
content = c("Task 1: Initial data model assimilation", "Task 2: Incorporating prior classification","Task 3: Incorporating abundance constraint","Task 4: Train CNN","Task 5: Landsat MSS","Task 6: New sensors","Task 7: Guano product","Task 8: Distribution"),
start = c("2020-01-01", "2020-01-01","2020-04-01","2020-04-01","2020-07-01","2020-10-01","2021-03-01","2021-06-01"),
end = c("2020-05-01", "2020-05-01","2020-06-01","2020-10-01","2020-12-31","2021-03-01","2021-07-01","2021-12-31")
)) %>%
setOptions(list(editable = FALSE)) %>%
fitWindow(list(animation = FALSE))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
timevis() %>%
setItems(data.frame(
id = 1:8,
content = c("", "Task 2: Incorporating prior classification","Task 3: Incorporating abundance constraint","Task 4: Train CNN","Task 5: Landsat MSS","Task 6: New sensors","Task 7: Guano product","Task 8: Distribution"),
start = c("2020-01-01", "2020-01-01","2020-04-01","2020-04-01","2020-07-01","2020-10-01","2021-03-01","2021-06-01"),
end = c("2020-05-01", "2020-05-01","2020-06-01","2020-10-01","2020-12-31","2021-03-01","2021-07-01","2021-12-31")
)) %>%
setOptions(list(editable = FALSE)) %>%
fitWindow(list(animation = FALSE))
library(aws.s3)
library(MCMCvis)
version <- "sw-thnnlb3u7oclv6ey6ro4"  #Adelie
s3load(paste('ModelBuild/',version,'/MCMCzstate.rda', sep = ''), bucket = "penguinmap")
?s3load
setwd("~/")
getwd()
s3load(paste('ModelBuild/',version,'/MCMCzstate.rda', sep = ''), bucket = "penguinmap")
256 x 2
256 x 2
255*2
512/30
17*17
1163.83+263.30+241.30+1120.70
19404/40
485/52
shiny::runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
60/17
3.5*380
1330/60
Data <- read.table("~/Desktop/Data.csv", quote="\"", comment.char="")
View(Data)
plot(Data)
head(Data)
head(Data$V1)
plot(Data$V1)
plot(Data$V1,typ="l")
hist(Data$V1)
sum(as.numeric(Data$V1>0.5))
1116/3445
rm(list=ls())
load("~/Dropbox/MAPPPD posteriors/SiteList_Gentoo.rda")
load("~/Dropbox/MAPPPD posteriors/Gentoo_MCMCzstate.RData")
dim(MCMCzstate)
length(MCMCzstate)
dim(MCMCzstate[[1]])
library(MCMCvis)
zstateList <- MCMCpstr(MCMCzstate, func = function(x) quantile(x, probs = c(0.025, .5, 0.975)))
dim(zstateList[[1]])
load("~/Downloads/MCMCzstate-2.rda")
zstateList <- MCMCpstr(MCMCzstate, func = function(x) quantile(x, probs = c(0.025, .5, 0.975)))
dim(zstateList[[1]])
rm(list=ls())
load("~/Dropbox/MAPPPD posteriors/Gentoo_MCMCzstate.RData")
zstateList <- MCMCpstr(MCMCzstate, func = function(x) quantile(x, probs = c(0.025, .5, 0.975)))
dim(zstateList[[1]])
load("~/Dropbox/MAPPPD posteriors/SiteList_Gentoo.rda")
runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
shiny::runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
shiny::runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
shiny::runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
shiny::runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
shiny::runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
shiny::runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
hist(rbeta(1000,0.5*1,(1-0.5)*1))
hist(rbeta(1000,0.5*10,(1-0.5)*10))
hist(rbeta(1000,0.5*100,(1-0.5)*100))
hist(rbeta(1000,0.5*10,(1-0.5)*10))
hist(rbeta(1000,0.9*10,(1-0.9)*10))
hist(rbeta(1000,0.9*100,(1-0.9)*100))
hist(rbeta(1000,0.9*10,(1-0.9)*10))
hist(rbeta(1000,0.9*20,(1-0.9)*20))
hist(rbeta(1000,0.9*20,(1-0.9)*20))
hist(rbeta(1000,0.5*20,(1-0.5)*20))
shiny::runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
b <- 1.78
prior=dgamma(x = 8:22,shape = a,rate = b)
plot(prior, x=8:22,ylim=c(0,0.42),pch=16,typ="b")
data=c(14,13,14,16,16,15,14,14,15,15,14,15,17,14)
for(i in 1:length(data)){
n= i
y = data[1:i]
posterior = dgamma(x = 8:22,shape = a+n*mean(y),rate = b + n)
lines(posterior,x=8:22,col=rainbow(15)[i])
}
a <- 28.4
b <- 1.78
prior=dgamma(x = 8:22,shape = a,rate = b)
plot(prior, x=8:22,ylim=c(0,0.42),pch=16,typ="b")
data=c(14,13,14,16,16,15,14,14,15,15,14,15,17,14)
for(i in 1:length(data)){
n= i
y = data[1:i]
posterior = dgamma(x = 8:22,shape = a+n*mean(y),rate = b + n)
lines(posterior,x=8:22,col=rainbow(15)[i])
}
a*b
a/B
a/b
runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
shiny::runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
work1 <- readRDS("../Library/SiteSceneL4578.rds")
runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
test<-rbind(c("cat",1,2),c("dog",4,1))
test
test<-data.frame(c("cat",1,2),c("dog",4,1))
test
colnames(test)<-c("V1","V2")
test
rbind(test,list("mouse",6,1))
?head
x<-c(1,2,3,4,5,6)
x==4
i<-5
for(i in 1:10){}
for(i in 1:10){print(i)}
i
?while
?while
help.search(while)
c("a":"e")
unique(c(1,2,3,4,4,4,5,))
unique(c(1,2,3,4,4,4,5))
?paste
shiny::runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
140000/12.05
11618*0.02905
338*12
shiny::runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
library(readr)
Gr_EVA_acetone_4_layerArray <- read_csv("Desktop/Gr_EVA_acetone_4_layerArray.csv",
col_names = FALSE)
View(Gr_EVA_acetone_4_layerArray)
hist(Gr_EVA_acetone_4_layerArray)
hist(as.numeric(Gr_EVA_acetone_4_layerArray))
hist(as.matrix(Gr_EVA_acetone_4_layerArray))
data<-as.matrix(Gr_EVA_acetone_4_layerArray)
dim(data)
library(MASS)
fitdistr(data,"beta")
?fitdistr
fitdistr(data,densfun="beta")
fitdistr(!ia.na(data),densfun="beta")
fitdistr(!is.na(data),densfun="beta")
fitdistr((data[!is.na(data)]),densfun="beta")
fitdistr((data[!is.na(data)]),densfun="beta",start=list(1,1))
fitdistr((data[!is.na(data)]),densfun="beta",start=list(shape1=1,shape2=1))
hist(data)
lines(dbeta(shape1=4.6,shape2=5.0))
lines(dbeta(x=seq(0,1,0.05),shape1=4.6,shape2=5.0))
dbeta(x=seq(0,1,0.05),shape1=4.6,shape2=5.0)
?dbeta
hist(data)
hist(rbeta(10000,shape1=4.6,shape2=5.0),add=T)
hist(rbeta(10000,shape1=4.6,shape2=5.0),add=T,col="red")
hist(data)
hist(rbeta(10000,shape1=4.6,shape2=5.0),add=T,col="red")
hist(data)
hist(rbeta(10000,shape1=4.6,shape2=5.0),add=T,col="red")
hist(data)
fitdistr((data[!is.na(data)]),densfun="beta",start=list(shape1=5,shape2=5))
fitdistr((data[!is.na(data)]),densfun="beta",start=list(shape1=10,shape2=5))
fitdistr((data[!is.na(data)]),densfun="beta",start=list(shape1=4,shape2=5))
fitdistr((data[!is.na(data)]),densfun="beta",start=list(shape1=4.6,shape2=5))
hist(rbeta(10000,shape1=4.6,shape2=5.0),col="red")
hist(data)
hist(rbeta(10000,shape1=4.6,shape2=5.0),col="red")
hist(data)
mean(rbeta(10000,shape1=4.6,shape2=5.0))
mean(data)
mean(data,na.rm=T)
4.6/(4.6+5)
rnorm(10,4.6,0.09)/(rnorm(10,4.6,0.09)+rnorm(10,5,0.1))
hist(rnorm(10000,4.6,0.09)/(rnorm(10000,4.6,0.09)+rnorm(10000,5,0.1)))
quantile(rnorm(10000,4.6,0.09)/(rnorm(10000,4.6,0.09)+rnorm(10000,5,0.1)),c(0.025,0.975))
head(data)
as.numeric(data)
as.numeric(data[!is.na(data)])
data2<-as.numeric(data[!is.na(data)])
length(data2)
hist(data2)
mean(data2)
?sample
mean.data<-c()
for (i in 1:1000)
{
data.temp<-sample(data2,size=length(data2),replace=T)
mean.data<-c(mean.data,mean(data.temp))
}
hist(mean.data)
quantile(mean.data,c(0.025,0.975))
mean(data2)
View(Gr_EVA_acetone_4_layerArray)
library(boot)
?boot.ci
city.boot <- boot(data2, mean, R = 999, stype = "all")
?boot
city.boot <- boot(data2, mean, R = 999)
shiny::runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
shiny::runApp('Documents/Projects/LandsatSeesAdelies/SceneSelectionShinyApp')
330*(1-0.37)
330*(1-0.37)*0.25
330*(1-0.37)*0.30
100*100
40*100
40*10
((7.5/2)^2)*3.14
((7.5/2)^2)*3.14*9
((7/2)^2)*3.14*8.5
setwd("~/Documents/Projects/Biometry2020")
bookdown::render_book("index.Rmd")
setwd("~/Documents/Projects/Biometry2020")
bookdown::render_book("index.Rmd")
