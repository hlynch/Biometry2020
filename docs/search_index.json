[
["index.html", "Biometry Lecture and Lab Notes Preface", " Biometry Lecture and Lab Notes Heather Lynch 2019-11-06 Preface This eBook contains all of the lecture notes and lab exercises that we will do this semester in Biometry. While I have made every effort to cite sources where I’ve used “found” material, this eBook reflects my own personal notes drawn up over nearly a decade of work and some material may not properly identify the original sources used in drawing up my initial lecture notes. As I have moved this material into an online eBook, I have tried to better document material inspired by or drawn from other sources. If you find anything in these notes that is not properly cited or sourced, please let me know so it can be amended. Any mistakes are mine and mine alone. "],
["week-1-lecture.html", "1 Week 1 Lecture 1.1 Reading Material 1.2 Basic Outline 1.3 Today’s Agenda 1.4 Basic Probability Theory 1.5 Multiple events 1.6 Conditionals 1.7 Bayes Theorem 1.8 A few foundational ideas 1.9 Overview of Univariate Distributions 1.10 What can you ask of a distribution? 1.11 A Brief Introduction to Scientific Method", " 1 Week 1 Lecture 1.1 Reading Material Text Foundational and Applied Statistics for Biologists Using R Biostatistical Design and Analysis Using R Papers from prmiary literature 1.2 Basic Outline First half: - R - bootstrap, jackknife, and other randomization techniques - hypothesis testing - probability distributions - the “classic tests” of statistics - graphical analysis of data Second half: regression (incl. ANOVA, ANCOVA) model building model criticism non-linear regression multivariate regression Grading: 12 Problem sets (3% each, 36% total) 2 Quizzes (2% each, 4% total) Midterm (25%) Final (35%) Class Structure Lecture on Tuesday “Lab”&quot; on Thursday Problem sets are posted on Wednesdays (feel free to remind me via Slack if I forget), and are due before lecture next Tuesday. This deadline is very strict, no exceptions. Turn in what you have before 8:30 am on Tuesday, even if its not complete. Communication Use slack! Come to (both) office hours E-mail me Weekdays 9 am - 10 pm Sundays 8 pm - 10 pm 1.3 Today’s Agenda Basic probability theory An overview of univariate distributions Calculating the expected value of a random variable A brief introduction to the Scientific Method Introduction to statistical inference 1.4 Basic Probability Theory A bag with a mix of regular and peanut M&amp;Ms Each M&amp;M has two traits: Color and Type \\[ \\sum_{all \\: colors} P(color) = 1 \\] \\[ \\sum_{all \\: types} P(types) = ? \\] Basic Probability Theory | Intersection Pull one M&amp;M out of the bag \\[ P(Green \\: AND \\: Peanut) = P(Green \\cap Peanut) = P(Green) \\cdot P(Peanut) \\] This is called a Joint Probability: \\(P(Green,Peanut)\\) Union: \\[ \\begin{align*} P(Green \\: OR \\: Peanut) &amp;= P(Green \\cup Peanut) \\\\ &amp;= P(Green) + P(Peanut) - P(Green \\cap Peanut) \\end{align*} \\] Complement: \\[ P(Green^c) = 1 - P(Green) \\] 1.5 Multiple events Pull 2 M&amp;Ms out of the bag \\[ P (Green \\: AND \\: THEN \\: Blue) = P(Green) \\cdot P(Blue) \\] What if we didn’t care about the order? 1.6 Conditionals \\[ P(A \\mid B) = P(A \\: conditional \\: on \\: B) \\] \\[ \\begin{align*} P(A,B) = P(A \\cap B) &amp;= P(A \\mid B) \\cdot P(B) \\\\ &amp;= P(B \\mid A) \\cdot P(A) \\end{align*} \\] 1.7 Bayes Theorem \\[ P(A \\mid B) \\cdot P(B) = P(B \\mid A) \\cdot P(A) \\] \\[ P(A \\mid B) = \\frac{P(B \\mid A) \\cdot P(A)}{P(B)}\\] \\[ P(parameters \\mid data) \\cdot P(data) = P(data \\mid parameters) \\cdot P(parameters) \\] \\[ P(parameters \\mid data) = \\frac{P(data \\mid parameters) \\cdot P(parameters)}{P(data)}\\] 1.8 A few foundational ideas There are a few statistics (a statistic is just something calculated from data) that we will need to know right at the beginning. For illustration purposes, lets assume we have the following (sorted) series of data points: (1,3,3,4,7,8,13) There are three statistics relating the “central tendancy”: the mean (the average value; 5.57), the mode (the most common value; 3), and the median (the “middle” value; 4). We often denote the mean of a variable with a bar, as in \\(\\bar{x}\\). There are also two statistics relating to how much variation there is in the data. The variance measures the average squared distance between each point and the mean. For reasons that we will discuss in lab, we estimate the variance using the following formula \\[ \\mbox{variance}_{unbiased} = \\frac{1}{n-1}\\sum_{i=1}^{n}(x_{i}-\\bar{x})^{2} \\] rather than the more intuitive \\[ \\mbox{variance}_{biased} = \\frac{1}{n}\\sum_{i=1}^{n}(x_{i}-\\bar{x})^{2} \\] Keep in mind that variance measures a distance squared. So if your data represent heights in m, than the variance will have units \\(m^{2}\\) or square-meters. The standard deviation is simply the square-root of variance, and is often denoted by the symbol \\(\\sigma\\). \\[ \\sigma = \\sqrt{\\frac{1}{n-1}\\sum_{i=1}^{n}(x_{i}-\\bar{x})^{2}} \\] If you were handed a distribution and you were asked to measure a characteristic “fatness” for the distribution, your estimate would be approximately \\(\\sigma\\). Note that \\(\\sigma\\) has the same units as the original data, so if your data were in meters, \\(\\sigma\\) would also be in meters. We won’t get to Normal distributions properly until Week 3, but we will need one fact about the “Standard Normal Distribution” now. The Standard Normal distribution is a Normal (or Gaussian, bell-shaped) distribution with mean equal to zero and standard deviation equal to 1. 68\\(\\%\\) of the probability is contained within 1 standard deviation of the mean (so from -\\(\\sigma\\) to +\\(\\sigma\\)), and 95\\(\\%\\) of the probability is contained within 2 standard deviations of the mean (so from -2\\(\\sigma\\) to +2\\(\\sigma\\)). (Actually, 95\\(\\%\\) is contained with 1.96 standard deviations, so sometimes we will use the more precise 1.96 and sometimes you will see this rounded to 2.) 1.9 Overview of Univariate Distributions Discrete Distributions - Binomial - Multinomial - Poisson - Geometric Continuous Distributions - Normal/Gaussian - Beta - Gamma - Student’s t - \\(\\chi^2\\) 1.10 What can you ask of a distribution? Probability Density Function: \\(P(x_1&lt;X&lt;x_2)\\) (continuous distributions) Probability Mass Function: \\(P(X=x_1)\\) (discrete distributions) Cumulative Density Function (CDF): What is \\(P(X \\le X^*)\\)? Quantiles of the distributions: What is \\(X^{*}\\) if \\(P(X \\le X^{*})=0.37\\)? Sample from the distribution: With a large enough sample, the histogram will come very close to the underlying PDF. Note that the CDF is the integration of the PDF, and the PDF is the derivative of the CDF, so if you have one of these you can always get the other. Likewise, you can always get from the quantiles to the CDF (and then to the PDF). These three things are all equally informative about the shape of the distribution. Expected Value of a Random Variable In probability theory the expected value of a random variable is the weighted average of all possible values that this random variable can take on. The weights used in computing this average correspond to the probabilities in case of a discrete random variable, or densities in case of continious random variable. Expected Value of a Random Variable | Discrete Case \\[ X = \\{X_1, X_2,...,X_k\\} \\\\ E[X] = \\sum_{i=1}^n{X_i \\cdot P(X_i)}\\] Example: Draw numbered balls with numbers 1, 2, 3, 4 and 5 with probabilities 0.1, 0.1, 0.1, 0.1, 0.6. \\[ \\begin{align*} E[X] &amp;= (0.1 \\cdot 1) + (0.1 \\cdot 2) + (0.1 \\cdot 3) + (0.1 \\cdot 4) + (0.6 \\cdot 5) \\\\ &amp;=4 \\end{align*}\\] Expected Value of a Random Variable | Continuous Case \\[ E[X] = \\int_{-\\infty}^{\\infty}{X \\cdot f(X)dX}\\] 1.11 A Brief Introduction to Scientific Method INDUCTIVE reasoning: A set of specific observations -&gt; A general principle Example: I observe a number of elephants and they were all gray. Therefore, all elephants are gray. DEDUCTIVE reasoning: A general principle -&gt; A set of predictions or explanations Example: All elephants are gray. Therefore, I predict that this new (as yet undiscovered) species of elephant will be gray. QUESTION: If this new species of elephant is green, what does this do to our hypothesis that all elephants are gray? Some terminology: Null Hypothesis: A statement encapsulating “no effect” Alternative Hypothesis: A statement encapsulating “an effect”&quot; Fisher: Null hypothesis only Neyman and Pearson: H0 and H1, Weigh risk of of false positive against the false negative We use a hyprid approach Hypothesis can only be rejected, they can never be accepted! “Based on the data obtained, we reject the null hypothesis that…” or “Based on the data obained, we fail to reject the null hypothesis that…” More terminology Population: Entire collection of individuals a researcher is interested in. Model: Mathematical description of the quantity of interest. It combines a general description (functional form) with parameters (population parameters) that take specific values. Population paramater: Some measure of a population (mean, standard deviation, range, etc.). Because populations are typically very large this quantity is unknown (and usually unknowable). Sample: A subset of the population selected for the purposes of making inference for the popualtion. Sample Statistic: Some measure of this sample that is used to infer the true value of the associated populatipn parameter. An example: Population: Fish density in a lake Sample: You do 30 net tows and count all the fish in each tow Model: \\(Y_i \\sim Binom(p,N)\\) The basic outline of statistical inference sample(data) -&gt; sample statistics -&gt; ESTIMATOR -&gt; population parameter -&gt; underlying distribution Estimators are imperfect tools Bias: The expected value \\(\\neq\\) population parameter Not consistent: As \\(n \\to \\infty\\) sample statistic \\(\\neq\\) population parameter Variance "],
["week-1-lab-handout.html", "2 Week 1 Lab Handout 2.1 Using R like a calculator 2.2 The basic data structures in R 2.3 Writing functions in R 2.4 Writing loops and if/else 2.5 (A short diversion) Bias in estimators 2.6 Lesson #6: Some practice writing R code 2.7 A few final notes", " 2 Week 1 Lab Handout In lab today, we will cover just a few of the basic elements of using R. If you are not already fluent with R, you should work through all of Logan Chapter 1, as there are many important elements covered in that chapter that we will not have time to go through in lab. I will assume everyone is using RStudio to run R - exercises and associated code will be written accordingly. For the purposes of lab, we will be entering all of the commands directly on the command line at the prompt. In general, however, you should get into the habit of writing scripts with all of your code. This will allow you to save your work and go back and easily use code that you have written in the past. When you are doing actual analyses for publication, it is essential that you have all of your code in well commented scripts that could be understood by another researcher in your field. All of your analysis should be fully reproducible long after the paper is published. 2.1 Using R like a calculator R can be used like a basic calculator with commands entered at the R prompt ‘&gt;’ 3+5 ## [1] 8 3*5 ## [1] 15 (The “##” is the html editor’s mechanism for indicating R output. The [1] is something that actually appears in the R output. It indicates that what you see is the first element of the output and in this case it can be ignored.) While R is fairly clever about the order of operations 3*5+7 ## [1] 22 it is good practice to be explicit (3*5)+7 ## [1] 22 Notice that the following two expressions are equivalent 4^(1/2) ## [1] 2 sqrt(4) ## [1] 2 The former expression uses the ^ to signify an exponent, whereas the latter uses the built-in R function sqrt() for the square-root. Note the difference between -4^(1/2) ## [1] -2 and (-4)^(1/2) ## [1] NaN In the first instance, R does the sqrt() and THEN applied the negative, whereas in the second case, it is trying to take the square-root of a negative number and it spits back NaN for ‘Not a Number’. To use scientific notation, use e. 2.2e3 ## [1] 2200 For large numbers, R automatically uses scientific notation although the threshold for scientific notation is something you can change using the R function ‘options’ (advanced use only - don’t worry about it for now). 2.2e3*5e5 ## [1] 1.1e+09 2.2 The basic data structures in R There are several basic types of data structures in R. VECTORS: One-dimensional arrays of numbers, character strings, or logical values (T/F) FACTORS: One-dimensional arrays of factors (Stop - Let’s discuss factors) DATA FRAMES: Data tables in which the various columns may be of different type MATRICES: In R, matrices can only be 2-dimensional, anything higher dimension is called an array (see below). Matrix elements are typically (but not necessarily) numerical, but the key difference from a data frame is that every element has to have the same type. Some functions, like the transpose function t(), only work on matrices. ARRAYS: higher dimensional matrices are called arrays in R LISTS: lists can contain any type of object as list elements. You can have a list of numbers, a list of matrices, a list of characters, etc., or any combination of the above. Vectors: Vectors can be column vectors or row vectors but we are almost always talking about column vectors which are defined with a c(). One example of a vector would be a sequence of numbers. There are many ways to generate sequences in R. Lets say you want to define an object x as the following sequence of numbers (1,2,3,4,5,6,7) You could do this this long way x&lt;-c(1,2,3,4,5,6,7) Notice here I have used the &lt;- to “assign” the column vector (hence “c”) of values to the variable x. I could also do this using x&lt;-1:7 or I could explicitly use the seq() function as follows x&lt;-seq(from=1,to=7) The sequence function actually has three inputs, but I have left the last off because the default is that you want to step in increments of 1. The full version would be x&lt;-seq(from=1,to=7,by=1) Make sure this works by printing out the value for x x Try changing it up a little with x&lt;-seq(from=1,to=16,by=3) STOP: Spend a few minutes making vectors and using some of the basic R commands. What happens if you pass a vector to one of R’s built-in functions? R can do a host of logical operations. x&lt;7 ## [1] TRUE TRUE FALSE FALSE FALSE FALSE We can turn that into a binary vector in at least two ways as.numeric(x&lt;7) ## [1] 1 1 0 0 0 0 or 1*(x&lt;7) ## [1] 1 1 0 0 0 0 The former forces R to return the values of x as a numerical vector, and by default False maps to 0 and True to 1. The latter version does the same thing, by multiplying the logical vector by a number. This trick comes in handy all the time. For example, if you want to know how many values of x are less than 7, you can simply do the following sum(as.numeric(x&lt;7)) ## [1] 2 You can also ask which elements satisfy certain criteria. In other words, you can type which(x&lt;7) ## [1] 1 2 This is telling you that the first and second elements of the vector are less than 7. We can take a random set of numbers y&lt;-c(4,8,6,3,6,9,2) and sort them sort(y) ## [1] 2 3 4 6 6 8 9 or reverse sort them rev(sort(y)) ## [1] 9 8 6 6 4 3 2 To pull up the help file for the R command ‘sort’: ?sort STOP: Let’s take this opportunity to go through all the elements of an R help file. We can also print out the rank of each value rank(y) ## [1] 3.0 6.0 4.5 2.0 4.5 7.0 1.0 Notice that ties got averaged. Elements of vectors in R are addressed using [] as follows First lets make a vector z z&lt;-seq(from=1,to=15,by=2) We can find the 4th element by simply typing z[4] ## [1] 7 or we can find the 3rd and 4th elements by typing z[c(3,4)] ## [1] 5 7 In this more complicated case, we create a vector of the indices we want, and feed that into the brackets. We can do the opposite as well, instead of pulling out a set of elements you want, you can excise a set of elements and print everything else. In other words, if you wanted all the elements BUT element 3, you would use the minus sign z[-3] ## [1] 1 3 7 9 11 13 15 Factors: To explore factors, we will use the dataset Prestige.csv I posted on Blackboard. To simply everything that follows, I will set the working directory to my own folder for this week’s lab. This will allow me to reference files within this folder without the entire file name. Load the data Prestige&lt;-read.csv(&quot;~/Dropbox/Biometry/Week 1 Preliminary Material/Week 1 Lab/Prestige.csv&quot;) We can look at the entire data set by typing the name at the command prompt, but we can also just look at the first few lines using the ‘head’ function head(Prestige) ## X education income women prestige census type ## 1 gov.administrators 13.11 12351 11.16 68.8 1113 prof ## 2 general.managers 12.26 25879 4.02 69.1 1130 prof ## 3 accountants 12.77 9271 15.70 63.4 1171 prof ## 4 purchasing.officers 11.42 8865 9.11 56.8 1175 prof ## 5 chemists 14.62 8403 11.68 73.5 2111 prof ## 6 physicists 15.64 11030 5.13 77.6 2113 prof or the last few lines using the ‘tail’ function tail(Prestige) ## X education income women prestige census type ## 97 train.engineers 8.49 8845 0.00 48.9 9131 bc ## 98 bus.drivers 7.58 5562 9.47 35.9 9171 bc ## 99 taxi.drivers 7.93 4224 3.59 25.1 9173 bc ## 100 longshoremen 8.37 4753 0.00 26.1 9313 bc ## 101 typesetters 10.00 6462 13.58 42.2 9511 bc ## 102 bookbinders 8.55 3617 70.87 35.2 9517 bc We can also get the dimensions of the data set using the ‘dim’ function dim(Prestige) ## [1] 102 7 or use the ‘length’ function to figure out the length of one of the columns length(Prestige[,1]) ## [1] 102 Factors are character labels which take fixed values. First just look at the data. Prestige ## X education income women prestige census type ## 1 gov.administrators 13.11 12351 11.16 68.8 1113 prof ## 2 general.managers 12.26 25879 4.02 69.1 1130 prof ## 3 accountants 12.77 9271 15.70 63.4 1171 prof ## 4 purchasing.officers 11.42 8865 9.11 56.8 1175 prof ## 5 chemists 14.62 8403 11.68 73.5 2111 prof ## 6 physicists 15.64 11030 5.13 77.6 2113 prof ## 7 biologists 15.09 8258 25.65 72.6 2133 prof ## 8 architects 15.44 14163 2.69 78.1 2141 prof ## 9 civil.engineers 14.52 11377 1.03 73.1 2143 prof ## 10 mining.engineers 14.64 11023 0.94 68.8 2153 prof ## 11 surveyors 12.39 5902 1.91 62.0 2161 prof ## 12 draughtsmen 12.30 7059 7.83 60.0 2163 prof ## 13 computer.programers 13.83 8425 15.33 53.8 2183 prof ## 14 economists 14.44 8049 57.31 62.2 2311 prof ## 15 psychologists 14.36 7405 48.28 74.9 2315 prof ## 16 social.workers 14.21 6336 54.77 55.1 2331 prof ## 17 lawyers 15.77 19263 5.13 82.3 2343 prof ## 18 librarians 14.15 6112 77.10 58.1 2351 prof ## 19 vocational.counsellors 15.22 9593 34.89 58.3 2391 prof ## 20 ministers 14.50 4686 4.14 72.8 2511 prof ## 21 university.teachers 15.97 12480 19.59 84.6 2711 prof ## 22 primary.school.teachers 13.62 5648 83.78 59.6 2731 prof ## 23 secondary.school.teachers 15.08 8034 46.80 66.1 2733 prof ## 24 physicians 15.96 25308 10.56 87.2 3111 prof ## 25 veterinarians 15.94 14558 4.32 66.7 3115 prof ## 26 osteopaths.chiropractors 14.71 17498 6.91 68.4 3117 prof ## 27 nurses 12.46 4614 96.12 64.7 3131 prof ## 28 nursing.aides 9.45 3485 76.14 34.9 3135 bc ## 29 physio.therapsts 13.62 5092 82.66 72.1 3137 prof ## 30 pharmacists 15.21 10432 24.71 69.3 3151 prof ## 31 medical.technicians 12.79 5180 76.04 67.5 3156 wc ## 32 commercial.artists 11.09 6197 21.03 57.2 3314 prof ## 33 radio.tv.announcers 12.71 7562 11.15 57.6 3337 wc ## 34 athletes 11.44 8206 8.13 54.1 3373 &lt;NA&gt; ## 35 secretaries 11.59 4036 97.51 46.0 4111 wc ## 36 typists 11.49 3148 95.97 41.9 4113 wc ## 37 bookkeepers 11.32 4348 68.24 49.4 4131 wc ## 38 tellers.cashiers 10.64 2448 91.76 42.3 4133 wc ## 39 computer.operators 11.36 4330 75.92 47.7 4143 wc ## 40 shipping.clerks 9.17 4761 11.37 30.9 4153 wc ## 41 file.clerks 12.09 3016 83.19 32.7 4161 wc ## 42 receptionsts 11.04 2901 92.86 38.7 4171 wc ## 43 mail.carriers 9.22 5511 7.62 36.1 4172 wc ## 44 postal.clerks 10.07 3739 52.27 37.2 4173 wc ## 45 telephone.operators 10.51 3161 96.14 38.1 4175 wc ## 46 collectors 11.20 4741 47.06 29.4 4191 wc ## 47 claim.adjustors 11.13 5052 56.10 51.1 4192 wc ## 48 travel.clerks 11.43 6259 39.17 35.7 4193 wc ## 49 office.clerks 11.00 4075 63.23 35.6 4197 wc ## 50 sales.supervisors 9.84 7482 17.04 41.5 5130 wc ## 51 commercial.travellers 11.13 8780 3.16 40.2 5133 wc ## 52 sales.clerks 10.05 2594 67.82 26.5 5137 wc ## 53 newsboys 9.62 918 7.00 14.8 5143 &lt;NA&gt; ## 54 service.station.attendant 9.93 2370 3.69 23.3 5145 bc ## 55 insurance.agents 11.60 8131 13.09 47.3 5171 wc ## 56 real.estate.salesmen 11.09 6992 24.44 47.1 5172 wc ## 57 buyers 11.03 7956 23.88 51.1 5191 wc ## 58 firefighters 9.47 8895 0.00 43.5 6111 bc ## 59 policemen 10.93 8891 1.65 51.6 6112 bc ## 60 cooks 7.74 3116 52.00 29.7 6121 bc ## 61 bartenders 8.50 3930 15.51 20.2 6123 bc ## 62 funeral.directors 10.57 7869 6.01 54.9 6141 bc ## 63 babysitters 9.46 611 96.53 25.9 6147 &lt;NA&gt; ## 64 launderers 7.33 3000 69.31 20.8 6162 bc ## 65 janitors 7.11 3472 33.57 17.3 6191 bc ## 66 elevator.operators 7.58 3582 30.08 20.1 6193 bc ## 67 farmers 6.84 3643 3.60 44.1 7112 &lt;NA&gt; ## 68 farm.workers 8.60 1656 27.75 21.5 7182 bc ## 69 rotary.well.drillers 8.88 6860 0.00 35.3 7711 bc ## 70 bakers 7.54 4199 33.30 38.9 8213 bc ## 71 slaughterers.1 7.64 5134 17.26 25.2 8215 bc ## 72 slaughterers.2 7.64 5134 17.26 34.8 8215 bc ## 73 canners 7.42 1890 72.24 23.2 8221 bc ## 74 textile.weavers 6.69 4443 31.36 33.3 8267 bc ## 75 textile.labourers 6.74 3485 39.48 28.8 8278 bc ## 76 tool.die.makers 10.09 8043 1.50 42.5 8311 bc ## 77 machinists 8.81 6686 4.28 44.2 8313 bc ## 78 sheet.metal.workers 8.40 6565 2.30 35.9 8333 bc ## 79 welders 7.92 6477 5.17 41.8 8335 bc ## 80 auto.workers 8.43 5811 13.62 35.9 8513 bc ## 81 aircraft.workers 8.78 6573 5.78 43.7 8515 bc ## 82 electronic.workers 8.76 3942 74.54 50.8 8534 bc ## 83 radio.tv.repairmen 10.29 5449 2.92 37.2 8537 bc ## 84 sewing.mach.operators 6.38 2847 90.67 28.2 8563 bc ## 85 auto.repairmen 8.10 5795 0.81 38.1 8581 bc ## 86 aircraft.repairmen 10.10 7716 0.78 50.3 8582 bc ## 87 railway.sectionmen 6.67 4696 0.00 27.3 8715 bc ## 88 electrical.linemen 9.05 8316 1.34 40.9 8731 bc ## 89 electricians 9.93 7147 0.99 50.2 8733 bc ## 90 construction.foremen 8.24 8880 0.65 51.1 8780 bc ## 91 carpenters 6.92 5299 0.56 38.9 8781 bc ## 92 masons 6.60 5959 0.52 36.2 8782 bc ## 93 house.painters 7.81 4549 2.46 29.9 8785 bc ## 94 plumbers 8.33 6928 0.61 42.9 8791 bc ## 95 construction.labourers 7.52 3910 1.09 26.5 8798 bc ## 96 pilots 12.27 14032 0.58 66.1 9111 prof ## 97 train.engineers 8.49 8845 0.00 48.9 9131 bc ## 98 bus.drivers 7.58 5562 9.47 35.9 9171 bc ## 99 taxi.drivers 7.93 4224 3.59 25.1 9173 bc ## 100 longshoremen 8.37 4753 0.00 26.1 9313 bc ## 101 typesetters 10.00 6462 13.58 42.2 9511 bc ## 102 bookbinders 8.55 3617 70.87 35.2 9517 bc Notice that the third column assigns a type of professional status to the different occupations. We can have R list all those by printing just the last column. We do that by using the $ followed by the name of that column: Prestige$type ## [1] prof prof prof prof prof prof prof prof prof prof prof prof prof prof ## [15] prof prof prof prof prof prof prof prof prof prof prof prof prof bc ## [29] prof prof wc prof wc &lt;NA&gt; wc wc wc wc wc wc wc wc ## [43] wc wc wc wc wc wc wc wc wc wc &lt;NA&gt; bc wc wc ## [57] wc bc bc bc bc bc &lt;NA&gt; bc bc bc &lt;NA&gt; bc bc bc ## [71] bc bc bc bc bc bc bc bc bc bc bc bc bc bc ## [85] bc bc bc bc bc bc bc bc bc bc bc prof bc bc ## [99] bc bc bc bc ## Levels: bc prof wc Notice that in addition to just listing that column, R also tells you what all the factor values are. We can do this with numerical values too, but be careful because R will interpret the numerical values as characters: IMPORTANT: By default, R will rank factors alphabetically. R will do this also when doing modeling and it is almost never what you want. In this case, you likely want to think of the factors arranged as bc\\(&lt;\\)wc\\(&lt;\\)prof. To do this you: Prestige$type&lt;-factor(Prestige$type,levels=c(&quot;bc&quot;,&quot;wc&quot;,&quot;prof&quot;)) levels(Prestige$type) ## [1] &quot;bc&quot; &quot;wc&quot; &quot;prof&quot; Data frames: R has a special object called a dataframe which is, as the name suggests, designed to hold data. Unlike a matrix, in which all the elements have to be the same type (typically numbers), dataframes are more like spreadsheets - each column can be its own datatype. So you can have a column of numbers associated with a second column of treatment types (character). Let’s make a data frame to play around with, which we will make the ranking of the top three girls and boys names for 2010. our.data.frame&lt;-data.frame(rank=seq(1:3),boys.names=c(&quot;Jacob&quot;,&quot;Ethan&quot;,&quot;Michael&quot;), girls.names=c(&quot;Isabella&quot;,&quot;Sophia&quot;,&quot;Emma&quot;)) our.data.frame ## rank boys.names girls.names ## 1 1 Jacob Isabella ## 2 2 Ethan Sophia ## 3 3 Michael Emma Now while I would encourage everyone to use the command line at all times, its worth pointing out that R does have a very basic data editor. To change a value in our.data.frame using the data editor, use the command ‘fix’ fix(our.data.frame) Note that the command ‘edit’ looks like it should do the same thing but it does not. In fact, ‘edit’ does not change the original data frame but it makes a changed copy which must be assigned another name. In the following example, the changes are stored in new.data.frame. new.data.frame&lt;-edit(our.data.frame) NOTE: R allows you to ‘attach’ a dataframe to a workspace so that you can refer to the individual columns without having to type in the name of the dataframe. I think this is terrible practice and makes your code impossible to read by your future self. Matrices: You make a matrix as follows (here we populate the matrix with a sequence from 1:12): test.matrix&lt;-matrix(1:12,nrow=3,ncol=4) test.matrix ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 Notice that in general, you do not need to include the label names for input parameters to functions. This gives the same answer: test.matrix&lt;-matrix(1:12,3,4) test.matrix ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 but I highly suggest leaving all labels for clarity of coding. R indexes matrices by ROW THEN COLUMN. So, for example, try test.matrix[2,3] ## [1] 8 R has all the functions you could ever want for matrix algebra, such as transposing: trans.test.matrix&lt;-t(test.matrix) See what happens when you try 1-test.matrix Notice that R automatically translates the 1 into a matrix of 1s such that the calculation makes sense. Arrays: Arrays are just higher dimensional matrices and since we will not use them much, I won’t get into details here. Lists: A list is a one-dimensional structure of potentially heterogeneous data types. list.1&lt;-list(data=seq(1,15),mat1=test.matrix,mat2=trans.test.matrix) We can reference elements of the list by name list.1$data ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 or by position list.1[[2]] ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 Notice that list indexing requires double brackets. 2.3 Writing functions in R Using R, you are not limited to functions that have been written for you, you can write your own functions! The basic template is straightforward: square&lt;-function(x) { x*x } We can use our function now as follows: square(5) ## [1] 25 You can also have more than one argument for an R function: product&lt;-function(x,y) { x*y } product(3,5) ## [1] 15 A few notes about using R. What makes R special is not the base package but the “Contributed packages” which make up the bulk of R’s utility. We will be using a variety of these contributed packages along the way, so you need to feel comfortable downloading them from the web. I have posted a handout on Blackboard to cover this. 2.4 Writing loops and if/else The R language is very good at doing operations on vectors or matrices, and when possible, this is always the preferred method of doing an operation mulitple times. However, sometimes this is not possible and you have to write a loop to perform some operation on elements taken one at a time. There are two different kinds of loops in R. A ‘for loop’ executes once for each step through the looping index. The basic syntax for a ‘for loop’ in R is: for (i in 1:6) { print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 The indexing variable does not need to be called “i”, it could be anything. What follows the “in” can be any sequence of numbers; they need not be consecutive. What appears inside the brackets is the chunk of code that will be executed at each iteration. This code can, but need not, actually use the indexing variable. Another example illustrating these points is: for (blah in c(1,3,5,6)) { print(4+blah) } ## [1] 5 ## [1] 7 ## [1] 9 ## [1] 10 A ‘while loop’ is open ended; it will execute the loop indefinitely until the ‘while’ condition is no longer met. The basic syntax for a ‘while loop’ in R is: i=1 while(i &lt;= 8) { y &lt;- i*i i &lt;- i + 1 # What would happen if we left this line out? print(y) } ## [1] 1 ## [1] 4 ## [1] 9 ## [1] 16 ## [1] 25 ## [1] 36 ## [1] 49 ## [1] 64 Sometimes, you want to make R check some condition before executing a command. An ‘if’ statement will check a statement and execute a chunk of code if the statement evaluates to TRUE. If the statement evaluates to FALSE, the code is simply skipped. An if/else statement allows a second chunk of code to be executed as an alternative to the first. The syntax for each is as follows: a&lt;-3 if (a&lt;4) print(&quot;Hello&quot;) ## [1] &quot;Hello&quot; if (a &lt; 4) { print(&quot;Hello&quot;) } else print(&quot;Goodbye&quot;) ## [1] &quot;Hello&quot; if (a &gt; 4) { print(&quot;Hello&quot;) } else print(&quot;Goodbye&quot;) ## [1] &quot;Goodbye&quot; 2.5 (A short diversion) Bias in estimators Now we will stop for a short digression about how to calculate the population variance (i.e. the variamce assuming the data I have is from the entire population) and how to estimate the sample variance (i.e. the variance assuming what I have is a sample from the population, and I want to infer the variance of the underlying but unknown population), since we can now use R to convince ourselves that the naive estimator for variance is biased. The population variance is the variance of a population which, by definition, means that every single individual of interest has been measured. Remember, in this case there is no inference going on. When we have measured every single individual of interest, all we can do (statistically) is describe that population. The population variance describes the variation in the quantity of interest for that population you have completely sampled). \\[ \\sum^{n}_{i=1}{\\frac{(Y_{i}-\\bar{Y})^{2}}{n}} \\] The sample variance answers the question “If this data I have come from a larger population, and I want to use these data to estimate the population variance in that larger population, what is the best unbiased estimator for that (unknown) population variance?” The formula for the sample variance (think of it like “the estimate of the variance from the sample”): \\[ \\sum^{n}_{i=1}{\\frac{(Y_{i}-\\bar{Y})^{2}}{n-1}} \\] We can see this in practice using a little simulation. Type the following into an R script and run it in R: n.iter&lt;-100 data&lt;-rnorm(n.iter,0,2) sum&lt;-0 for (j in 1:length(data)) { sum&lt;-sum+((data[j]-mean(data))*(data[j]-mean(data))) } population.variance&lt;-sum/length(data) sample.variance&lt;-sum/(length(data)-1) What is the ratio of the sample variance to the population variance? Are either close to what we know the true variance to be? What happens if we change n.iter to 1000? Do the values get closer to the correct value? What happens to the ratio of the sample variance to the population variance? What does the R function var() give you? 2.6 Lesson #6: Some practice writing R code We will be using a cloud-seeding dataset from: Simpson, Alsen, and Eden. (1975). A Bayesian analysis of a multiplicative treatment effect in weather modification. Technometrics 17, 161-166. The data consist of data on the amount of rainfall (in acre-feet) from unseeded clouds vs. those seeded with silver nitrate. Here and throughout I have assumed the data resides in a folder called Biometry on a thumb drive called TEACHING drive but you will have to change the code according to your own file structure. (I am using a Mac, but getting the pathname correct I have included a .txt file and a .csv file to show you the differences in inputting your data: Method 1: cloud.data&lt;-read.table(&quot;~/Dropbox/Biometry/Week 1 Preliminary Material/Week 1 Lab/clouds.txt&quot;) Notice that that doesn’t work because the headers have become part of the data. cloud.data&lt;-read.table(&quot;~/Dropbox/Biometry/Week 1 Preliminary Material/Week 1 Lab/clouds.txt&quot;, header=T) Remember that we need to add the “header=T” or it will assume the headers are actually the first line of data. Method 2: cloud.data&lt;-read.table(&quot;~/Dropbox/Biometry/Week 1 Preliminary Material/Week 1 Lab/clouds.csv&quot;, header=T) This doesn’t work because R does know what the delimiter is. You have to specify the delimiter: cloud.data&lt;-read.table(&quot;~/Dropbox/Biometry/Week 1 Preliminary Material/Week 1 Lab/clouds.csv&quot;, header=T,sep=&quot;,&quot;) or use the command ‘read.csv’ which automatically assumes its comma delimited. cloud.data&lt;-read.csv(&quot;~/Dropbox/Biometry/Week 1 Preliminary Material/Week 1 Lab/clouds.csv&quot;, header=T) There are two ways to refer to the first column of data. Because we have column headers, we can refer to them by name using the “$” as follows: cloud.data$Unseeded_Clouds ## [1] 1202.6 830.1 372.4 345.5 321.2 244.3 163.0 147.8 95.0 87.0 ## [11] 81.2 68.5 47.3 41.1 36.6 29.0 28.6 26.3 26.1 24.4 ## [21] 21.7 17.3 11.5 4.9 4.9 1.0 but we can also just ask for a specific column of the data, in this case the first column cloud.data[,1] ## [1] 1202.6 830.1 372.4 345.5 321.2 244.3 163.0 147.8 95.0 87.0 ## [11] 81.2 68.5 47.3 41.1 36.6 29.0 28.6 26.3 26.1 24.4 ## [21] 21.7 17.3 11.5 4.9 4.9 1.0 Note that you can always print the data using just the name cloud.data ## Unseeded_Clouds Seeded_Clouds ## 1 1202.6 2745.6 ## 2 830.1 1697.8 ## 3 372.4 1656.0 ## 4 345.5 978.0 ## 5 321.2 703.4 ## 6 244.3 489.1 ## 7 163.0 430.0 ## 8 147.8 334.1 ## 9 95.0 302.8 ## 10 87.0 274.7 ## 11 81.2 274.7 ## 12 68.5 255.0 ## 13 47.3 242.5 ## 14 41.1 200.7 ## 15 36.6 198.6 ## 16 29.0 129.6 ## 17 28.6 119.0 ## 18 26.3 118.3 ## 19 26.1 115.3 ## 20 24.4 92.4 ## 21 21.7 40.6 ## 22 17.3 32.7 ## 23 11.5 31.4 ## 24 4.9 17.5 ## 25 4.9 7.7 ## 26 1.0 4.1 or, if its easier, can use the data editor as described above. Lets calculate the variance of each treatment. For now, I will do this step-by-step, defining intermediate variables along the way. For simplicity, I redefine the two columns worth of data as “A” and “B”: A&lt;- cloud.data$Unseeded_Clouds mean.A&lt;-mean(A) diff.from.mean.A&lt;- A-mean.A n.A&lt;-length(A) # Here I am just calculating the sample size to use in next line s2.A&lt;-sum(diff.from.mean.A^2)/(n.A-1) s2.A ## [1] 77521.26 Redo the calculation for the Seeded clouds to get “s2.B”. We could have saved ourselves a lot of effort by using the R function “var”: s2.A&lt;-var(A) s2.A ## [1] 77521.26 Is the variance for the Seeded clouds the same as the Unseeded clouds? How close (to equal) is close enough? What is the null hypothesis? 2.7 A few final notes I mentioned at the outset that all of your code should be kept in a script (some kind of text file; it could be a .R file but it could be a simple .txt file) and that your code should be clearly commented. Comments can be added to code using the # sign. For example a&lt;-3+5 #This is a comment everything after the # is not executed by R and is simply for your use in understanding the code. **Short digression on brackets and good coding practices. "],
["week-2-lecture.html", "3 Week 2 Lecture 3.1 Hypothesis testing and p-values 3.2 Permutation tests 3.3 Parameter estimation 3.4 Method #1: Non-parametric bootstrap 3.5 Parametric bootstrap 3.6 Jackknife 3.7 Jackknife-after-bootstrap", " 3 Week 2 Lecture 3.1 Hypothesis testing and p-values There are few topics in statistics more controversial than the various philosophies behind null hypothesis testing. Over the next two weeks we will learn about the two paradigms (Fisher vs. Neyman-Pearson), the hybrid approach mostly commonly used in ecology, and criticisms of the whole enterprise. Bayesian statistics takes an entirely different approach than either Fisher or Neyman-Pearson, and the Bayesian approach resolves many of the inconsistencies involved with frequentist statistics, but at the expense of increased computation (and the use of prior information…). We frame decision-making in terms of a null and an alternative hypothesis. \\(H_{0}\\) vs. \\(H_{A}\\) To take Karl Popper’s famous example: \\(H_{0}\\): There are no vultures in the park. \\(H_{A}\\): There are vultures in the park. Note that the data may reject the null hypothesis (for example, finding vultures in the park), or the data may fail to reject the null hypothesis, but it can never prove the null hypothesis. We cannot prove there are no vultures in the park. We can only say that we were not able to find any vultures in the park, and therefore cannot reject the null hypothesis. Fisher’s original context for developing significance testing was agricultural experiments that could be easily replicated. Fisher’s threshold of 0.05 was an arbitrary threshold for an effect to be considered worthy of continued experimentation. Any experiment that failed to reach this threshold would not be pursued. Experiments that gave “significant” results would be subject to additional experiments. These additional experiments may prove the original effect to be a fluke (and experiments would cease) or the additional experiments may provide confirmatory evidence that the effect was real. Null hypothesis testing (as I will teach it) involves 6 steps. Step #1: Specify a null hypothesis \\(H_{0}\\) (Note that I do not include specification of the alternative hypothesis \\(H_{A}\\) here. While the alternative hypothesis is useful as a mental construct, the basic approach deals only with \\(H_{0}\\) and does not require a \\(H_{A}\\). Step #2: Specific an appropriate test statistic T. A test statistic is some summary of your data that pertains to the null hypothesis. For testing simple hypotheses, there are test statistics known to be ideal in certain situations. However, even in these simple cases, there are other test statistics that could be used. In more complex situations, YOU will have to determine the most appropriate test statistic. generic=T=f(X) specific \\(T^{*}\\)=T(\\(X_{1}\\),\\(X_{2}\\),…,\\(X_{n}\\)) We will introduce many more test statistics in the weeks to come but a simple example of a test statistic would be the use of \\(\\bar{X}\\)̅ (the mean of your sample) as a measure of the mean of the normally distributed population from which the sample was derived. Step #3: Determine the distribution of the test statistic under the null hypothesis \\(H_{0}\\). A test statistic is a statistical quantity that has a statistical distribution. \\(f(T│H_{0})\\) Notice that this is the probability of obtaining the test statistic T GIVEN the null distribution, it is NOT \\(f(H_{0}│T)\\). The test statistic and its distribution under the null hypothesis is the statistical test. Test = Test statistic + Distribution of test statistic under \\(H_{0}\\) Step #4: Collect data and calculate T* Collect data by taking random samples from your population and calculate the test statistic from the sample data. Step #5: Calculate a p-value Calculate the probability that you would get a value for the test statistic as large or larger than that obtained with the data under the null hypothesis \\(P(T^{*}│H_{0})\\)=p-value Step #6: Interpret the p-value Use the p-value to determine whether to reject the null hypothesis (or, alternatively, to decide that the null hypothesis cannot be rejected) These steps apply for both parametric and non-parametric statistics. Here we are introducing hypothesis testing through the lens of randomization procedures, but the same steps will be used again when we get into statistics involving parametric distributions (i.e. statistical distributions of known form and described by a finite number of parameters) and their properties. As you will see in a few weeks, most standard statistical tests involve a test statistic with a known distribution under the null hypothesis; here the distribution under the null hypothesis needs to be generated by randomization (randomization test). (We are starting with the randomization-based procedures because there is no math involved and it is more intuitive.) The basic idea underlying all statistical tests: What is the probability that I would get a test statistic as large or larger (as produced by the data) if the null hypothesis was true (this is the “p-value”). To answer this question we need (1) a test statistic and (2) a distribution under the null hypothesis. p-value = \\(P(data|H_{0})\\) Remember – the p-value is a statement about the probability of getting your data if the null hypothesis were true. It is NOT a statement about the probability that the null hypothesis is true. This logic can go wrong!! Example: If a person is an American, he is probably not a member of Congress. This person is a member of Congress. Therefore he is probably not an American. Let’s draw a null distribution. In order to interpret the statistical test, we need to know whether we want a one-tailed test or a two-tailed test. In a one-tailed test, we would reject the null hypothesis only if the test statistic is larger than expected under in the null in one direction (5\\(%\\) in one tail). In a two-tailed test, we would reject the null if the test statistic is larger in either direction (2.5\\(%\\) in both tails). EXAMPLE: Let’s say I’m looking at the change in auto accident mortalities after a ban is enacted on driving while texting. We would expect that auto accident mortality would decrease after a ban on texting while driving. Let’s say, for arguments sake, that our test statistic T is the change in accident deaths \\(H_{0}\\): T=0 (no change in deaths) \\(H_{A}\\): T&lt;0 (decline in deaths) Another possible formulation of the null and alternative hypotheses is \\(H_{0}\\): T=0 (no change in deaths) \\(H_{A}\\): T \\(\\neq\\) 0 (increase or decline in deaths) Why does it matter? Consider the first case. To reject the null hypothesis, you would have to show that the measured decline T^*was so large as to be very unlikely to have occurred by random chance assuming there was no true change in death rate. Therefore, you would require \\(P(T \\geq T^{*}│H_{0})&lt;0.05\\) to be true for you to decide to reject the null hypothesis. This is a one-tailed test. Consider the second case. To reject the null hypothesis, you would accept values of \\(T^{*}\\) as significant if they were either very large or very small, and would divide the 5% critical region between the two tails \\(P(T \\geq T^{*}│H_{0})&lt;0.025\\) \\(P(T \\leq T^{*}│H_{0})&lt;0.025\\) Notice that it now becomes a more stringent test. If \\(T^{*}\\) is large, it now has to be even larger to qualify as “significant”. This is a two-tailed test. TWO KEY POINTS: If you are using a one-tailed test, you have to be willing to accept a result that is opposite in sign of what was expected as being PURELY BY CHANCE!! In other words, if traffic deaths went UP after the texting ban, you would have to be willing to accept that that was by pure chance and you would then fail to reject the null hypothesis of NO CHANGE. This is in fact what happened, by the way: Texting bans actually increase traffic deaths – WHY? Before using the more “lenient” one-tailed test, make sure you really believe that results opposite to what you expect are only random You cannot do a one-tailed test, find the answer to have the wrong sign and then do a two-tailed test. While probably quite common, this is not statistically valid. You cannot use the data to generate the test! Not all tests are created equal!! Tests differ in their power to detect differences, and their efficiency. The balance between power and efficiency depends on the specific situation; we will discuss this more next week. We are going to introduce the idea of hypothesis testing through the practice of permutation tests, because it allows us to get into the flow of testing hypotheses without the burden of a lot of complicated mathematics. 3.2 Permutation tests Let’s say we have two random samples drawn from possibly different probability distributions F and G, \\(F \\rightarrow z=\\{z_{1},z_{2},...,z_{n}\\}\\) \\(G \\rightarrow y=\\{y_{1},y_{2},...,y_{m}\\}\\) Having observed z and y, we wish to test the null hypothesis \\(H_{0}\\) of no difference between F and G, \\(H_{0}:F=G\\). Note that the equality F=G means that the two distributions are exactly the same across their entire distribution, not just that their means are the same. If \\(H_{0}\\) is true, than there is no probabilistic difference between drawing random values from F and drawing random values from G. What are some possible test statistics that we might use in this case? There are many test statistics that we could use to test this null hypothesis but lets use the difference in means as the test statistic. If there is a large difference in their means, than we can probably reject the null hypothesis that they represent the same underlying distribution. \\(T=E[F]-E[G]=\\bar{x}-\\bar{y}\\) The way to do this is to lump all the data together with their “label” (and here I will use the example from the problem set and test whether males and females have different blood sugar distributions), and to randomly permute the labels so that the gender identity of the data points is randomized. In other words, if there are 10 males and 15 females, then you would randomly select 10 of the blood sugar levels and label them “male” and the remaining 15 would be labeled “female”. NOTE: We are not sampling with replacement here. We are simply permuting the gender labels to “erase” the correlation between gender and blood sugar. We then calculate the mean of the “fake male” group and the mean of the “fake female” group and take the difference. That is the result of ONE permutation. If we do that many many times (say, 10000 times) then the distribution of those differences reflects the distribution under the null hypothesis of no correlation between gender and blood sugar. We will do an example like this in the problem set. 3.3 Parameter estimation Hypothesis testing is a bit like the game 50-questions (Are you red? Are you blue? Each question is a null hypothesis to be rejected…). Parameter estimation appears at first glance more direct, it just asks “What are you?”, and in doing so it estimates the value of a parameter (mean growth rate of a fish population, for example) and provides a measure of uncertainty about that estimate. As a reminder, estimators are tools that produce estimates of population statistics from sample statistics. The basic outline of “statistical inference”: Data = sample \\(\\rightarrow\\) sample statistics \\(\\rightarrow\\) ESTIMATOR \\(\\rightarrow\\) population parameters We generally use the word “statistic” when discussing the data, and “parameter” when discussing the underlying distribution. An “estimator” or “point estimate” is a statistic (that is, a function of the data) that is used to infer the value of an unknown parameter in a statistical model. If the parameter is denoted \\(\\theta\\) then the estimator is typically written by adding a “hat” over the symbol: \\(\\hat{\\theta}\\). Being a function of the data, the estimator is itself a random variable; a particular realization of this random variable is called the “estimate”. Sometimes the words “estimator” and “estimate” are used interchangeably, but I will try and be consistent in using the word “estimator” for the function in the generic, and the word “estimate” for the result of applying that function to the data at hand. Example: \\[ X \\sim N(\\mu,\\sigma^{2}) \\] We define the “estimator” for \\(\\mu\\) as \\[ \\frac{1}{n}\\sum_{i=1}^{n}X_{i} \\] Therefore, the “estimate” \\(\\hat{\\mu}\\) is \\[ \\hat{\\mu}=\\bar{X} =\\frac{1}{n}\\sum_{i=1}^{n}X_{i} \\] Estimators are IMPERFECT tools. Bias: As \\(n \\rightarrow \\infty\\), sample statistic does not converge to the population parameter Standard error: Each individual estimate may be too low or too high from the true value (this can occur even if the long run average value is correct, i.e. unbiased) Why are estimators associated with a standard error? If you were to do your experiment all over again, say 1000 times, the value of your estimate would be different each time. Your 1000 estimates would have a statistical distribution with some spread, and the spread of these 1000 estimates is quantified by the standard error. How do we estimate the bias and variance (related to standard error) of an estimator? While there are other methods that we will discuss in a few weeks, now we are going to introduce the idea through two non-parametric approaches: bootstrap and jackknife. First we need to stop and discuss what it means to sample from an empirical distribution. Let’s say I have a bunch of lotto balls in an urn \\(X=\\{X_{1},X_{2},X_{3},...,X_{n}\\}\\) and I want to draw sets of 5 lotto numbers from that urn. I can sample with replacement or without replacement. If you sample with replacement, we may get some numbers more than once. It also means that if you draw n balls out of an urn with n numbers, there are some numbers you will never draw. STOP: Do you understand sample-with-replacement and sample-without-replacement? 3.4 Method #1: Non-parametric bootstrap The basic idea behind bootstrap sampling is that even if we don’t know what the distribution is that underlies the data, we can “pull ourselves up by our bootstraps” and generate the distribution by resampling WITH REPLACEMENT from the data itself. Say we have original data drawn from an unknown distribution G \\(X=\\{X_{1},X_{2},X_{3},...,X_{n}\\}\\) \\[ X \\sim G() \\] We don’t know the underlying distribution, but we can substitute the empirical distribution \\(\\hat{G}\\) which is defined by \\(\\{X_{1},X_{2},X_{3},...,X_{n}\\}\\). In other words, we model the underlying “true” unknown distribution as a multinomial where every value in X is given a probability \\(\\frac{1}{n}\\) of occurring. Let’s say we want to compute a statistic of the probability distribution \\(\\theta=f(G)\\), which could be the mean or the median or the standard error of the standard deviation (anything at all!!). BTW: \\(\\theta\\) is analogous to the test statistic T used for hypothesis testing, and it will be used in the same way. However, I will use the symbol \\(\\theta\\) to be consistent with the Efron and Tibshirani and other literature on the bootstrap. The “plug-in” principle states that for every parameter of the underlying distribution, we can estimate that function by simply plugging in the empirical distribution \\[ \\hat{\\theta}=f(\\hat{G})=f(X) \\] This is exactly what we would do intuitively. If we have a bunch of numbers and we want to know the mean of the distribution from whence they came, we would use as the best estimate the mean of those numbers. The “plug-in” principle simply formalizes the idea that these summary statistics can be used to make inference about the generating distribution. In the development to follow, we will assume that we have NO other information about a distribution other than a single sample from that distribution. Summary statistics are easy enough to compute, but we don’t have any way of knowing how accurate those summary statistics might be. The bootstrap gives us a way to calculate the accuracy of our summary statistics \\(\\hat{\\theta}\\). The bootstrap works NO MATTER HOW COMPLICATED THE FUNCTION, IT IS COMPLETELY AUTOMATIC, AND REQUIRES NO THEORETICAL CALCULATIONS. First we need the idea of a bootstrap sample. A bootstrap sample is any sample drawn randomly WITH REPLACEMENT from the empirical distribution. BOOTSTRAP = SAMPLE WITH REPLACEMENT \\(X^{*}=\\{\\mbox{n values drawn with replacement from } X\\}\\) n = size of the bootstrap sample = size of the original dataset We draw k such bootstrap samples: \\[ X_{1}^{*}=\\{\\mbox{n values drawn with replacement from } X\\} \\] \\[ X_{2}^{*}=\\{\\mbox{n values drawn with replacement from } X\\} \\] etc. \\[ X_{k}^{*}=\\{\\mbox{n values drawn with replacement from } X\\} \\] Important: Because we are sampling WITH REPLACEMENT, some of the original values will be represented more than once in any given bootstrap sample and others not at all. We calculate our statistic of interest on each bootstrap sample: \\[ \\theta_{1}^{*}=f(X_{1}^{*}) \\] \\[ \\theta_{2}^{*}=f(X_{2}^{*}) \\] etc. \\[ \\theta_{k}^{*}=f(X_{k}^{*}) \\] We will number the different bootstrap sample statistics as \\[ \\theta_{1}^{*},θ_{2}^{*},θ_{3}^{*},...,θ_{k}^{*} \\] k = number of bootstrap samples, you can choose the number of bootstrap samples, more sample = better estimates Now that we have our collection of k bootstrapped estimates of the statistic, what do we do with them? Remember: The goal was to calculate the bias and standard error of our estimator. \\[ \\widehat{Bias_{boot}}=\\left( \\frac{1}{k}\\sum_{i=1}^{k}\\theta_{i}^{*}\\right)-\\hat{\\theta} \\] In other words, the Bias of our estimator is simply the mean of the bootstrapped sample statistics minus the statistic as calculated for the original data. (For unbiased estimators, our estimate of bias goes to zero as the sample size n gets very large.) We can also use these bootstrapped statistics to calculate the standard error of the estimator: \\[ \\widehat{se_{boot}}=\\sqrt{\\frac{1}{k-1}\\sum_{i=1}^{k}(\\theta_{i}^{*}-\\bar{\\theta^{*}})^{2}} \\] This is just the standard deviation of the distribution of \\(\\theta\\). This is a really important point that is worth dwelling on for a bit. Our uncertainty about the value is captured by how much variation there is when I draw a different sub-sample of the data, which mimics re-doing the experiment altogether. In this case, I call the standard deviation of those \\(\\theta^{*}\\) values a standard error, because they represent my uncertainty (my potential error) about \\(\\hat{\\theta}\\). Do not confuse standard deviation and standard error. A standard deviation is a statistic (something calculated from data) about the spread of the data. A standard error is the standard deviation of my estimates, and therefore is a measure of how uncertain I am about my estimate. We will work through 2 examples, one using hand calculations, and one using R pseudocode. Example 1: Data: 10 pennies that the students have Test statistic: Median Lets say we are trying to find the median age of all pennies in circulation. We can’t figure this out exactly, because we can’t collect all the pennies in circulation, but we each have a sample of 10 pennies. The median age of the pennies in our sample is a reasonable estimate for the median age of all pennies in circulation. What is our uncertainty about that number? How far might our estimate of the median age be from the true median age? In this case, we don’t know the underlying distribution of penny ages. (Let’s brainstorm this for a bit. Do we have any guesses what this distribution might look like? What might be a reasonable distribution to describe the shape of penny age?) Let’s use bootstrapped samples to calculate the s.e. associated with that estimate. Procedure: 1. Sample WITH REPLACEMENT a group of 10 pennies. (To sample with replacement you will have to sample one penny, write down the age, and repeat that 10 times.) 2. Calculate the median age from that sample of pennies. 3. Repeat Over time you will gather a collection of median estimates, each one of which was calculated using a different bootstrapped dataset. They can be used to calculate the Bias and the Variance of the estimator. We actually have two primary mechanisms for generating confidence intervals for the statistic. Method #1: We can use the following normal approximation: \\[ \\hat{\\theta^{*}} \\sim N(\\hat{\\theta},\\hat{se}^{2}) \\] STOP: How do we construct a confidence interval from this? \\[ \\hat{\\theta}_{LL}=\\hat{\\theta}-1.96*\\hat{se} \\] \\[ \\hat{\\theta}_{UL}=\\hat{\\theta}+1.96*\\hat{se} \\] Remember that 95\\(\\%\\) of the probability for a Standard Normal distribution lies between (-1.96\\(\\sigma\\),+1.96\\(\\sigma\\))? Here we are using the same principle, capturing 95\\(\\%\\) of the probability of the distribution by assuming the distribution of \\(\\theta^{*}\\) is Normal and pulling out the lower limit and the upper limit lying 1.95 times the standard deviation below and above (respectively) the estimate. OR Method #2: we could do away with normal approximations altogether and simply take the quantiles directly from the distribution of \\(\\hat{\\theta}^{*}\\): \\[ \\theta_{LL} = \\mbox{2.5th percentile of } \\hat{\\theta}^{*} \\] \\[ \\theta_{UL} = \\mbox{97.5th percentile of } \\hat{\\theta}^{*} \\] Notice that (by construction) 95\\(%\\) of the \\(\\hat{\\theta}^{*}\\) values fall in the interval \\((\\theta_{LL},\\theta_{UL})\\). NB: If you are going to go through the trouble of doing the bootstrap sampling, I don’t know why you would make a normal approximation at the very end to construct the CIs. I recommend Method #2. Example 2: Knowing how to draw bootstrap replicates gets more complicated when you have multivariate datasets. For example, lets start with a dataset comparing average LSAT scores and GPA for the incoming classes for 15 law schools Lets say we want to estimate the true correlation coefficient between LSAT scores and GPA. We haven’t covered this yet, but one estimator for the true correlation coefficient is Pearson’s product moment correlation coefficient r \\[ r=\\frac{cov(a,b)}{\\sqrt{var(a)×var(b)}} \\] Therefore, in this case \\[ \\hat{r} = \\frac{cov(LSAT,GPA)}{\\sqrt{var(LSAT)*var(GPA)}} \\] (In R, we would write this as r.est = cor.test(LSAT,GPA)$estimate.) If LSAT and GPA both come from a normal distribution, then we could use the theory of normal distributions to calculate the standard error of \\(\\hat{r}\\). (We will learn this in Week 9.) But, we know LSAT and GPA can’t be from normal distributions. At the very least, GPA is bounded on (0,4), so it cannot be Normally distributed. So, how do we calculate the standard error of \\(\\hat{r}\\)? Here we sample with replacement from the bivariate PAIRS of data. In other words, we sample \\[ X_{1}^{*}=(LSAT_{i},GPA_{i}), \\mbox{where i=sample with replacement 1...n} \\] \\[ X_{2}^{*}=(LSAT_{i},GPA_{i}), \\mbox{where i=sample with replacement 1...n} \\] and so forth, and then calculate the correlation of each simulated dataset. Question: Why not sample with replacement from the two datasets independently? What question would that be answering? If we do this many times, say k=10,000 times, then we can draw a histogram of these bootstrapped correlation coefficients. We can calculate the standard error of our estimate for the correlation coefficient \\[ \\hat{se}_{boot} = \\sqrt{\\left(\\frac{1}{k-1}\\right)\\sum_{i=1}^{k}(r_{i}^{*}-\\bar{r^{*}})^{2}} \\] Therefore, using R, we would calculate the parametric correlation coefficient as: r.est ± 1.96*s.e.boot (VERSION 1) Even better, we can calculate the 95th percentile confidence interval of this distribution: quantile(all.cor,c(0.025,0.975)) (VERSION 2) Note that while VERSION 1 is common, VERSION 2 is preferred because there is no guarantee that the distribution of bootstrap statistics is even vaguely Normal. Bootstrapping can deal with even more complex cases, and is particularly useful when dealing with spatial or temporal autocorrelation. Take for instance a time series of hormone levels: If you wanted to do some time series analysis of this data, say to calculate the correlation between each datapoint and the last datapoint, you would have a difficult time doing so because of the complex temporal autocorrelation. Bootstrap can help in this case, but its not at all obvious how to bootstrap from this time series and preserve the essential temporal autocorrelation structure of the data. One approach would be to do a “moving blocks” bootstrap. This is more advanced, but it makes the point that a) bootstrap can be enormously useful in a variety of complicated analyses and b) you have to think carefully about what to sample in order to preserve the essential element of the data. R has numerous functions for doing bootstrapping, although bootstrapping is so easy its often just as easy (and more transparent) to simply write your own code to do it. We will go over some examples in lab. Note that the procedure we have described is called the non-parametric bootstrap estimate because it is based only on the non-parametric empirical distribution G ̂. If we had assumed some kind of distributional form for G, it would be considered a parametric bootstrap. 3.5 Parametric bootstrap The parametric bootstrap is similar to the non-parametric bootstrap except that instead of drawing our bootstrap samples from the original data, we fit a distribution to the data first, and then draw our samples from that. We haven’t covered how to fit a distribution to data yet, nor have we introduced any of the univariate distributions, so I won’t show you how to do a parametric bootstrap now but we’ll get some practice in the Week 3 problem set. Why would we ever do a parametric bootstrap? We might use a parametric distribution if our original sample size was so small that we did not think it could “stand in” for the underlying parametric distribution. For example, if your dataset for coin age just so happens not to have any coins made in 1990, you may be uncomfortable having all your bootstrapped datasets also be missing coins made in 1990. (Remember: Bootstrapping is, in some way, supposed to mimic redoing your experiment. Do you really think that you’d never get a coin made in 1990?) To get around this problem, you might do a parametric bootstrap. Note that, if you use MLEs to get the parameters for the parametric bootstrap, those parameter estimates assume large sample sizes (the formula are asymptotically correct for large sample sizes) and so you have to be a little caution that your parametric bootstrap might not be capturing the true underlying distribution. While parametric bootstrap is often done when sample sizes are too small, occasionally it may also be used when you have some strong theoretical justification for a particular distribution but the statistics you are interested in have no simple formula. (In other words, maybe the distribution is known, but the statistical properties of the specific parameter you are interested in is not known but could be derived through parametric bootstrapping.) 3.6 Jackknife Jackknifing is another method of assessing bias and standard error of sample statistics. Jackknife can also be used to establish the influence of each datapoint in your dataset. The procedure simply involves leaving out each datapoint and recalculating the statistic of interest. If your dataset involves the set \\[ \\{x_{1},x_{2},x_{3}\\} \\] then the jackknife samples are \\[ \\{x_{1},x_{2}\\},\\{x_{1},x_{3}\\},\\{x_{2},x_{3}\\} \\] The traditional notation is that the estimate based on the dataset when the ith element is removed is (\\(\\widehat{\\theta_{(i)}}\\)). The jackknife estimate of bias is given by \\[ \\widehat{Bias_{jack}}=(n-1)(\\hat{\\theta_{(.)}}-\\hat{\\theta}) \\] where \\[ \\hat{\\theta}_{(.)}=\\frac{1}{n}\\sum_{i=1}^{n}\\hat{\\theta}_{(i)} \\] You can convince yourself of this formula by working out the case where \\(\\hat{\\theta}\\) is the mean. You can also see intuitively why you would have to multiply the jackknife estimate of bias by (n-1) since the deviation of the jackknifed samples from the full sample is much smaller than the standard deviation of the bootstrapped samples. (DOES EVERYONE SEE WHY?) The jackknife estimate of standard error is given by \\[ \\hat{se}_{jack}=\\sqrt{\\frac{n-1}{n}\\sum_{i=1}^{n}(\\hat{\\theta}_{(i)}-\\hat{\\theta}_{(.)})^{2}} \\] With the pennies example, we had 10 pennies and we have only 10 possible jackknifed samples. Do you see why? Note that while bootstrapping can involve simulating an arbitrarily large number of pseudosamples (k), there are only n possible jackknife replicates for a dataset of size n. Exercise: Use your pennies to calculate \\(\\widehat{Bias}_{jack}\\) and \\(\\widehat{se}_{jack}\\). Both bootstrap and jackknife can estimate the standard error of a statistic, and in this way, their use can often be interchangeable. However, the jackknife can ONLY compute the bias and standard error whereas the bootstrap calculates the entire distribution of the statistic from which the standard error can be inferred. Bootstrapping is often more computer intensive, but with modern computers this is hardly a drawback. 3.7 Jackknife-after-bootstrap Jackknife-after-bootstrap is one method of assessing the standard error of bootstrap statistics. For example, jackknife-after-bootstrap can give us the standard error of the bootstrap standard error: \\[ \\widehat{se}_{jack}(\\widehat{se}_{boot}) \\] To do this there are two steps: Leave out data point i and use the remaining data in a bootstrap analysis to calculate (s.e.) ̂_(boot(i)) Define \\[ \\widehat{se}_{jack}(\\widehat{se}_{boot})=\\sqrt{\\left(\\frac{n-1}{n}\\right)\\sum_{i=1}^{n}(\\hat{se}_{boot(i)}-\\hat{se}_{boot(.)})^{2}} \\] Notice that because there are always some bootstrap samples that do not include i, you do not actually have to do any extra computation to do jackknife-after-bootstrap, but the precise details of using the bootstrap samples you already have are a bit complicated. In R, this can be done using the ‘jack.after.boot’ function in the package “boot”. Discuss: Why are hypothesis testing and parameter estimation two sides of the same coin? "],
["week-2-lab.html", "4 Week 2 Lab 4.1 Basics of bootstrap and jackknife 4.2 Calculating bias and standard error 4.3 Parametric bootstrap", " 4 Week 2 Lab 4.1 Basics of bootstrap and jackknife To get started with bootstrap and jackknife techniques, we start by working through a very simple example. First we simulate some data x&lt;-seq(0,9,by=1) This will constutute our “data”. Let’s print the result of sampling with replacement to get a sense for it… table(sample(x,size=length(x),replace=T)) ## ## 0 2 4 5 7 8 9 ## 3 1 2 1 1 1 1 Now we will write a little script to take bootstrap samples and calculate the means of each of these bootstrap samples xmeans&lt;-vector(length=1000) for (i in 1:1000) { xmeans[i]&lt;-mean(sample(x,replace=T)) } The actual number of bootstrapped samples is arbitrary at this point but there are ways of characterizing the precision of the bootstrap (jackknife-after-bootstrap) which might inform the number of bootstrap samples needed. In practice, people tend to pick some arbitrary but large number of bootstrap samples because computers are so fast that it is often easy to draw far more samples than are actually needed. When calculation of the statistic is slow (as might be the case if you are using the samples to construct a phylogeny, for example), then you would need to be more concerned with the number of bootstrap samples. First, lets just look at a histogram of the bootstrapped means and plot the actual sample mean on the histogram for comparison hist(xmeans,breaks=30,col=&quot;pink&quot;) abline(v=mean(x),lwd=2) 4.2 Calculating bias and standard error From these we can calculate the bias and standard deviation for the mean (which is the “statistic”): \\[ \\widehat{Bias_{boot}} = \\left(\\frac{1}{k}\\sum^{k}_{i=1}\\theta^{*}_{i}\\right)-\\hat{\\theta} \\] bias.boot&lt;-mean(xmeans)-mean(x) bias.boot ## [1] 0.0577 hist(xmeans,breaks=30,col=&quot;pink&quot;) abline(v=mean(x),lwd=5,col=&quot;black&quot;) abline(v=mean(xmeans),lwd=2,col=&quot;yellow&quot;) \\[ \\widehat{s.e._{boot}} = \\sqrt{\\frac{1}{k-1}\\sum^{k}_{i=1}(\\theta^{*}_{i}-\\bar{\\theta^{*}})^{2}} \\] se.boot&lt;-sd(xmeans) We can find the confidence intervals in two ways: Method #1: Assume the bootstrap statistics are normally distributed LL.boot&lt;-mean(xmeans)-1.96*se.boot #where did 1.96 come from? UL.boot&lt;-mean(xmeans)+1.96*se.boot LL.boot ## [1] 2.765316 UL.boot ## [1] 6.350084 Method #2: Simply take the quantiles of the bootstrap statistics quantile(xmeans,c(0.025,0.975)) ## 2.5% 97.5% ## 2.8000 6.3025 Let’s compare this to what we would have gotten if we had used normal distribution theory. First we have to calculate the standard error: se.normal&lt;-sqrt(var(x)/length(x)) LL.normal&lt;-mean(x)-qt(0.975,length(x)-1)*se.normal UL.normal&lt;-mean(x)+qt(0.975,length(x)-1)*se.normal LL.normal ## [1] 2.334149 UL.normal ## [1] 6.665851 In this case, the confidence intervals we got from the normal distribution theory are too wide. Does it make sense why the normal distribution theory intervals are too wide? Because the original were were uniformly distributed, the data has higher variance than would be expected and therefore the standard error is higher than would be expected. There are two packages that provide functions for bootstrapping, ‘boot’ and ‘boostrap’. We will start by using the ‘bootstrap’ package, which was originally designed for Efron and Tibshirani’s monograph on the bootstrap. To test the main functionality of the ‘bootstrap’ package, we will use the data we already have. The ‘bootstrap’ function requires the input of a user-defined function to calculate the statistic of interest. Here I will write a function that calculates the mean of the input values. library(bootstrap) ## Warning: package &#39;bootstrap&#39; was built under R version 3.5.2 theta&lt;-function(x) { mean(x) } results&lt;-bootstrap(x=x,nboot=1000,theta=theta) results ## $thetastar ## [1] 4.5 3.7 5.2 3.9 4.6 4.2 3.9 4.2 4.5 4.5 2.9 4.5 5.7 3.6 5.7 3.5 4.6 ## [18] 4.8 3.9 4.3 3.4 4.4 5.0 3.5 5.7 3.9 4.8 4.0 3.2 5.3 7.3 4.2 4.2 6.0 ## [35] 4.7 3.9 4.3 5.2 4.2 5.6 4.5 5.0 3.1 5.5 3.3 6.2 3.3 4.2 4.0 4.4 4.9 ## [52] 5.3 5.4 4.3 3.2 5.1 5.2 4.2 2.9 4.8 6.1 5.7 4.8 3.3 3.8 5.8 3.2 4.2 ## [69] 2.4 4.8 5.1 4.3 4.2 3.1 4.8 5.4 5.2 3.2 4.8 5.2 4.7 5.0 6.6 4.6 5.5 ## [86] 5.6 4.1 4.0 2.8 5.5 2.9 5.9 5.1 5.2 3.9 3.7 4.6 4.0 4.8 4.5 4.5 4.8 ## [103] 4.5 3.9 4.7 4.2 2.4 4.5 6.6 3.2 3.9 6.1 6.1 3.5 5.2 5.7 5.4 5.3 5.6 ## [120] 5.8 5.6 3.4 4.1 4.2 5.2 4.5 5.7 4.1 3.5 5.0 4.3 2.7 4.6 5.4 6.3 5.1 ## [137] 5.3 4.0 5.1 4.8 5.2 3.9 5.3 5.7 4.8 4.2 5.2 4.0 5.4 4.9 4.4 4.2 5.3 ## [154] 5.6 3.3 4.3 3.9 4.6 3.5 4.2 4.2 4.4 5.0 5.1 4.8 4.1 5.1 4.5 5.1 5.2 ## [171] 5.7 4.9 6.7 6.2 5.8 5.1 3.8 5.5 3.6 4.6 3.1 3.0 5.0 4.8 4.9 5.1 5.2 ## [188] 2.0 2.9 4.2 2.8 3.2 4.2 3.5 4.2 3.8 5.5 4.8 2.9 4.3 5.5 4.5 3.7 5.2 ## [205] 3.7 4.7 4.9 4.1 5.3 4.4 5.6 4.1 4.1 4.0 4.7 4.9 4.0 3.8 4.6 3.7 4.9 ## [222] 3.3 6.1 5.2 3.7 4.7 1.9 5.5 3.8 3.1 5.4 6.2 4.9 3.9 3.1 4.0 5.5 5.4 ## [239] 5.0 4.9 3.9 4.2 4.3 5.1 4.7 5.6 4.1 3.1 4.5 4.5 3.0 4.8 5.9 4.5 6.0 ## [256] 5.3 6.2 4.7 4.3 2.2 3.9 4.4 4.5 4.8 2.6 2.9 4.8 3.5 4.5 5.6 4.2 5.8 ## [273] 3.8 5.9 4.1 4.7 4.5 5.8 2.5 2.7 4.8 5.0 5.1 3.4 5.1 4.5 4.4 2.9 3.8 ## [290] 5.1 4.3 4.2 3.7 3.7 4.4 3.8 5.8 4.1 5.0 5.1 4.4 5.3 5.6 6.5 6.2 6.2 ## [307] 3.3 5.7 4.1 4.7 2.9 4.4 5.7 5.2 4.7 5.7 5.3 3.2 4.4 5.0 3.2 5.1 4.8 ## [324] 4.8 3.4 5.1 5.1 5.5 5.0 4.8 4.9 3.5 4.0 4.9 4.6 4.7 3.4 4.1 3.4 2.7 ## [341] 4.3 5.5 6.4 5.0 4.9 5.1 3.4 4.7 4.1 2.6 5.3 4.0 3.1 4.5 6.1 5.0 4.7 ## [358] 4.2 4.7 3.1 3.3 3.3 5.6 3.8 5.8 2.7 5.2 5.5 4.1 4.6 4.4 5.1 4.3 4.3 ## [375] 4.3 3.9 5.7 3.2 2.8 2.9 5.2 3.1 3.9 4.2 4.8 3.9 3.3 3.7 5.2 4.0 5.9 ## [392] 5.9 5.4 6.6 3.7 4.9 4.4 4.5 4.4 4.9 3.9 4.7 4.6 5.4 3.7 4.5 6.9 3.4 ## [409] 5.0 4.6 6.3 5.9 3.4 4.7 3.4 4.9 3.8 2.2 3.0 6.8 5.5 4.4 3.9 4.5 3.8 ## [426] 4.7 4.7 5.3 4.8 3.6 5.1 5.6 5.0 4.7 5.9 5.1 3.6 4.9 3.7 3.3 4.7 5.1 ## [443] 5.5 2.7 3.9 2.8 4.6 3.9 5.9 3.8 4.1 6.6 3.3 2.9 4.4 4.6 3.9 5.2 5.2 ## [460] 3.3 4.2 5.1 4.2 5.2 5.0 3.0 5.2 5.6 3.0 3.9 3.9 3.0 5.0 5.1 4.3 4.2 ## [477] 5.2 5.1 3.3 5.2 5.7 4.5 3.9 4.3 4.4 5.0 3.2 4.1 5.1 6.0 4.0 3.7 5.5 ## [494] 5.5 3.7 5.1 3.1 3.6 6.4 5.7 6.6 4.5 3.5 5.0 3.9 5.4 4.5 4.0 4.4 5.1 ## [511] 5.9 5.0 2.7 3.9 3.9 5.4 5.8 4.5 5.1 2.8 3.3 3.6 5.9 5.0 5.2 3.8 2.9 ## [528] 6.8 4.2 2.9 3.6 4.0 4.7 6.0 3.5 3.8 4.6 3.9 4.9 2.3 4.3 4.1 4.2 4.6 ## [545] 4.5 3.0 5.1 5.5 7.3 5.1 3.3 4.5 3.2 5.4 4.0 4.0 4.9 4.3 5.3 2.6 4.6 ## [562] 6.3 3.7 4.7 5.6 3.2 6.4 4.3 5.1 4.3 4.2 4.8 2.7 3.2 5.8 3.6 4.2 6.0 ## [579] 3.2 4.6 6.3 6.3 5.7 3.9 3.6 4.3 4.8 3.7 5.2 4.2 4.6 3.5 5.0 4.2 3.6 ## [596] 4.9 5.1 5.5 3.8 5.6 4.4 5.4 3.7 5.7 3.6 4.2 4.7 4.9 5.2 3.3 4.7 4.8 ## [613] 4.9 3.9 3.5 3.4 3.5 3.2 5.5 4.1 5.0 5.6 4.4 5.0 4.5 5.0 3.8 4.5 4.8 ## [630] 4.5 5.2 5.4 5.2 4.5 4.0 3.8 2.5 5.9 4.4 5.3 4.9 4.7 6.1 6.2 2.7 4.0 ## [647] 5.0 4.1 5.6 3.5 5.4 3.5 4.8 3.4 3.7 5.6 5.5 3.8 6.4 4.0 5.3 4.1 3.9 ## [664] 3.2 4.1 4.6 4.5 5.7 5.0 5.0 3.9 4.1 3.8 4.9 5.3 3.8 4.6 5.6 4.8 5.3 ## [681] 6.0 3.6 4.9 4.1 3.0 4.3 4.1 3.9 4.3 5.2 4.6 4.7 6.1 4.5 4.4 5.2 5.6 ## [698] 4.5 3.0 4.5 6.0 4.6 5.5 5.5 4.1 3.9 5.0 2.4 4.1 4.3 5.6 5.0 4.5 4.3 ## [715] 4.9 5.1 3.3 5.5 5.4 2.6 4.1 3.0 4.4 4.8 3.7 4.0 5.0 4.3 3.8 4.8 4.9 ## [732] 4.3 2.7 5.2 4.2 3.7 4.7 5.8 3.7 3.5 4.6 3.6 3.3 3.3 4.4 3.9 3.9 3.1 ## [749] 4.7 5.5 4.1 5.4 2.4 4.0 3.2 3.4 6.0 3.7 3.6 5.8 2.6 4.6 5.0 4.1 5.7 ## [766] 4.4 5.1 4.1 5.4 4.7 3.8 4.5 3.0 4.2 4.4 7.0 4.0 5.1 4.1 4.5 3.1 3.8 ## [783] 5.5 5.6 5.5 4.9 3.3 4.5 4.0 4.5 6.1 3.2 4.2 5.1 4.2 4.0 7.1 4.0 5.0 ## [800] 5.0 4.5 5.6 4.9 5.2 4.2 4.1 6.0 5.0 5.5 4.8 3.8 4.2 4.7 3.5 3.3 2.5 ## [817] 3.5 4.2 3.6 5.6 3.8 3.7 2.9 4.6 3.8 4.7 5.9 4.8 4.9 5.8 5.8 3.7 5.6 ## [834] 4.4 5.0 3.1 5.2 5.7 2.7 3.0 5.1 4.4 3.5 6.1 5.0 2.6 4.9 4.8 4.0 3.9 ## [851] 4.3 4.0 4.3 4.1 5.1 5.9 4.9 4.0 3.3 3.6 6.1 5.5 3.9 5.5 3.6 3.2 3.4 ## [868] 4.9 2.9 4.2 5.0 4.7 6.5 5.9 5.1 4.2 5.7 5.0 4.5 3.9 3.4 5.6 3.7 4.3 ## [885] 2.8 3.2 5.5 5.1 4.3 3.3 4.3 5.2 5.8 3.2 6.7 4.9 3.4 4.2 3.2 4.6 4.2 ## [902] 5.7 6.0 3.9 4.0 5.0 2.6 2.7 5.9 3.4 5.0 3.9 5.6 5.5 3.8 2.8 3.1 5.3 ## [919] 3.8 5.0 3.7 5.0 3.8 5.0 4.6 4.1 5.4 3.6 4.7 6.5 4.5 3.8 3.6 4.3 4.9 ## [936] 4.4 5.1 5.4 5.9 5.2 5.1 6.0 3.5 5.0 5.6 5.6 4.3 6.1 5.0 4.2 3.6 3.1 ## [953] 4.4 4.3 4.7 4.5 4.1 4.3 6.2 4.9 5.0 4.0 2.8 5.6 4.6 3.9 5.6 4.8 4.6 ## [970] 5.4 4.8 4.8 5.4 5.2 4.9 5.4 5.5 2.7 3.5 4.3 5.1 5.1 5.5 4.6 2.5 5.4 ## [987] 4.4 4.3 5.5 5.2 4.6 3.8 3.7 3.6 3.6 5.1 3.5 5.0 5.0 3.2 ## ## $func.thetastar ## NULL ## ## $jack.boot.val ## NULL ## ## $jack.boot.se ## NULL ## ## $call ## bootstrap(x = x, nboot = 1000, theta = theta) quantile(results$thetastar,c(0.025,0.975)) ## 2.5% 97.5% ## 2.7 6.3 Notice that we get exactly what we got last time. This illustrates an important point, which is that the bootstrap functions are often no easier to use than something you could write yourself. You can also define a function of the bootstrapped statistics (we have been calling this theta) to pull out immediately any summary statistics you are interested in from the bootstrapped thetas. Here I will write a function that calculates the bias of my estimate of the mean (which is 4.5 [i.e. the mean of the number 0,1,2,3,4,5,6,7,8,9]) bias&lt;-function(x) { mean(x)-4.5 } results&lt;-bootstrap(x=x,nboot=1000,theta=theta,func=bias) results ## $thetastar ## [1] 3.2 3.3 5.1 3.9 4.4 4.0 4.7 3.5 2.8 5.0 3.2 6.1 3.9 2.8 6.0 2.8 4.6 ## [18] 4.8 3.5 3.8 4.1 4.8 3.9 3.5 3.3 5.6 3.4 4.3 4.5 5.9 5.1 4.4 5.6 4.1 ## [35] 5.4 3.1 4.4 5.0 3.0 5.1 5.2 5.1 4.1 3.9 5.7 4.7 4.7 5.3 5.6 5.8 4.4 ## [52] 5.8 2.8 4.7 4.4 4.4 5.1 4.8 6.2 3.6 4.7 3.3 4.0 6.2 4.9 5.3 4.7 4.1 ## [69] 4.0 5.0 4.9 5.4 3.1 3.7 6.6 3.0 3.9 5.4 4.9 3.6 5.6 4.5 3.3 5.2 4.0 ## [86] 5.0 4.0 7.2 4.4 3.9 4.7 5.1 4.0 3.5 4.8 4.2 4.5 4.6 3.2 4.9 4.5 4.3 ## [103] 4.3 4.4 3.6 4.3 5.9 5.2 4.1 3.6 4.9 4.3 3.4 4.2 4.0 3.6 5.3 3.8 4.8 ## [120] 3.9 4.6 6.0 5.3 4.2 3.5 3.7 3.3 3.8 5.0 5.2 4.0 4.7 4.9 3.8 3.4 5.8 ## [137] 3.9 5.1 3.3 3.4 4.7 5.2 3.3 3.9 4.3 4.3 3.5 4.4 4.6 4.6 3.7 5.0 4.9 ## [154] 4.9 4.8 4.7 4.3 6.4 4.1 3.3 4.3 6.0 5.1 3.2 3.9 4.1 3.3 2.4 3.5 4.7 ## [171] 4.6 4.4 3.7 5.8 4.0 4.6 3.3 3.9 4.6 4.7 4.5 5.7 5.2 4.8 4.4 5.1 5.5 ## [188] 6.2 4.6 4.5 5.1 4.4 3.3 4.0 3.2 4.5 5.3 3.9 6.3 6.6 3.4 5.7 3.8 4.6 ## [205] 3.5 3.9 4.5 4.7 4.6 6.3 5.8 4.0 3.9 4.7 4.1 4.3 3.8 6.6 5.2 3.3 2.9 ## [222] 5.0 4.9 4.4 3.2 5.1 6.0 4.5 5.8 5.0 3.9 5.0 3.4 3.5 4.6 4.2 4.0 4.7 ## [239] 4.1 5.3 5.9 3.6 4.0 5.5 3.6 4.9 4.9 3.5 5.5 5.2 4.9 3.5 3.2 5.5 5.8 ## [256] 4.8 5.6 4.3 5.5 5.3 3.9 3.9 4.3 2.2 5.5 5.1 5.4 5.1 3.8 4.3 5.4 4.0 ## [273] 4.6 5.2 4.5 4.2 4.8 2.6 5.0 3.9 3.6 3.8 4.3 4.4 5.1 3.4 5.2 5.1 4.3 ## [290] 3.8 5.0 3.9 3.7 4.9 4.0 4.2 3.9 5.2 4.9 4.6 4.8 4.3 5.0 3.9 6.1 4.2 ## [307] 5.5 4.5 6.0 4.3 5.0 4.9 2.5 4.9 5.7 5.0 5.4 2.9 3.6 4.6 4.6 2.6 4.6 ## [324] 4.8 5.9 4.5 4.3 5.2 3.9 5.6 3.2 2.5 4.8 5.9 4.2 5.6 5.2 4.7 4.6 4.1 ## [341] 3.7 6.3 4.4 2.3 3.9 2.9 5.0 6.3 4.4 6.1 4.5 5.8 5.4 4.1 4.3 5.7 3.9 ## [358] 3.6 4.4 4.0 5.5 6.7 4.4 5.5 3.3 4.4 5.3 4.7 4.4 4.0 5.4 4.3 5.9 3.5 ## [375] 3.8 3.7 4.6 5.9 4.7 4.1 3.9 4.1 3.9 3.8 2.4 5.4 3.0 4.7 6.9 4.5 3.5 ## [392] 5.1 5.7 4.6 5.0 4.1 3.4 4.5 3.6 4.7 6.3 5.2 4.0 5.3 4.4 5.5 3.2 4.4 ## [409] 3.9 4.9 4.5 4.3 3.4 5.5 5.6 7.3 4.3 3.8 4.7 4.4 5.0 3.7 5.2 4.0 5.2 ## [426] 4.4 3.8 5.4 3.4 6.1 5.4 5.5 4.3 4.5 5.8 5.6 5.0 3.6 6.5 3.6 5.4 5.2 ## [443] 5.2 4.5 4.7 5.5 4.8 3.8 2.2 3.1 6.5 3.3 4.0 5.3 6.0 5.8 4.5 3.5 5.0 ## [460] 4.3 4.2 4.0 5.3 3.2 4.7 4.3 3.2 4.4 4.2 4.6 5.9 3.9 5.6 4.6 3.1 4.4 ## [477] 5.3 4.0 5.8 4.7 4.7 6.0 6.0 4.6 5.6 4.6 5.5 2.9 4.0 3.3 5.3 3.5 4.1 ## [494] 4.9 5.0 4.1 3.7 5.9 3.4 4.4 4.9 4.7 4.4 5.3 6.2 4.8 3.8 5.5 4.8 5.3 ## [511] 5.3 3.9 4.9 4.2 4.2 4.5 3.9 4.1 6.5 5.0 4.8 4.4 4.3 3.7 5.9 4.7 5.0 ## [528] 3.9 6.2 2.3 3.4 2.5 5.4 4.8 5.3 5.6 3.5 6.0 4.1 3.6 5.1 4.5 4.5 5.2 ## [545] 4.2 5.7 5.3 3.8 3.5 2.6 5.1 5.2 4.2 4.5 5.5 3.4 4.2 5.9 4.6 3.7 4.3 ## [562] 4.6 5.7 5.2 6.1 4.0 2.5 4.2 5.9 4.9 6.0 3.8 3.1 4.2 3.3 4.7 4.3 3.2 ## [579] 4.7 4.8 3.7 5.2 5.3 4.0 5.4 5.0 4.7 2.2 6.2 3.8 5.1 4.8 4.9 4.8 3.2 ## [596] 3.6 3.9 3.8 4.3 3.1 6.4 4.6 2.8 4.3 3.9 4.1 4.0 5.0 4.5 4.7 4.1 5.4 ## [613] 3.4 4.6 5.6 4.5 2.9 3.4 3.9 4.4 3.6 5.3 4.4 3.6 1.7 4.6 3.1 3.7 4.5 ## [630] 4.0 5.3 3.6 5.7 5.1 4.8 5.1 2.5 4.1 3.3 4.2 3.8 5.5 5.5 4.5 4.1 1.8 ## [647] 4.9 5.3 4.3 4.3 4.9 4.7 5.6 3.6 5.6 3.9 3.6 3.5 4.2 4.5 3.7 4.7 4.5 ## [664] 2.8 4.0 4.4 4.2 4.5 3.7 4.9 2.8 6.2 6.2 3.9 5.7 2.8 4.3 3.0 3.9 3.4 ## [681] 5.4 3.7 4.7 3.8 4.4 4.9 5.0 4.7 5.0 3.8 4.3 4.3 5.3 4.3 4.4 4.9 3.9 ## [698] 5.4 3.7 4.6 4.9 4.6 6.8 3.7 3.9 6.1 3.7 4.5 6.0 5.0 3.6 3.8 4.3 3.8 ## [715] 5.0 4.3 6.0 4.5 4.8 5.1 4.6 4.9 4.4 4.3 3.5 3.9 4.9 4.0 5.1 4.0 2.7 ## [732] 3.7 4.5 4.1 6.2 4.5 3.9 3.9 3.7 5.3 3.0 5.2 2.4 5.1 4.5 4.1 4.8 7.2 ## [749] 4.5 6.7 5.6 5.4 4.6 5.1 1.9 4.7 5.7 3.8 4.6 5.6 4.5 3.2 5.2 4.3 3.6 ## [766] 4.0 4.0 5.5 3.8 5.0 4.7 5.2 5.7 4.0 4.0 4.2 4.8 5.3 6.0 5.3 5.2 4.4 ## [783] 4.3 4.1 3.9 6.2 3.2 5.4 3.6 3.0 4.9 3.7 3.5 4.7 4.0 4.3 5.4 6.0 4.4 ## [800] 6.0 4.4 4.0 4.2 2.9 3.5 5.2 3.2 3.1 3.9 3.1 4.7 6.3 3.9 5.2 4.3 5.5 ## [817] 3.8 2.8 5.3 5.5 5.4 4.2 4.1 4.8 4.4 5.9 4.5 4.9 4.9 5.3 4.0 4.5 3.6 ## [834] 5.0 3.3 5.1 5.1 4.4 4.5 3.3 4.4 4.4 4.4 4.1 4.0 5.2 3.4 4.1 4.3 2.9 ## [851] 4.9 4.6 5.9 3.0 4.4 5.1 4.2 4.0 4.5 4.3 3.0 3.7 4.1 5.0 4.9 3.6 5.7 ## [868] 5.4 5.1 5.4 4.2 3.8 4.8 3.2 4.1 3.9 3.7 4.7 4.3 4.1 4.1 4.8 3.5 3.4 ## [885] 3.5 5.7 4.6 4.0 5.0 4.2 5.2 3.7 4.4 4.0 3.4 4.6 3.4 4.7 5.1 5.8 5.1 ## [902] 4.2 2.3 3.9 4.6 3.3 5.9 5.6 4.3 4.0 5.2 5.9 5.7 3.4 5.1 2.9 3.0 3.8 ## [919] 4.8 4.6 4.2 4.5 4.7 4.6 2.8 3.9 1.9 5.4 4.9 3.5 4.3 4.9 3.6 2.3 4.6 ## [936] 4.6 5.0 5.5 4.4 4.8 5.5 4.4 3.4 5.4 5.2 3.0 4.1 5.0 4.6 4.7 3.9 4.9 ## [953] 3.7 4.4 6.4 4.8 3.7 4.4 4.6 5.2 6.4 4.3 4.4 4.4 3.2 4.3 4.4 5.4 5.1 ## [970] 5.4 4.9 2.8 3.2 4.5 5.1 4.3 5.4 3.8 5.5 3.4 4.5 5.0 6.1 4.7 3.1 3.7 ## [987] 5.3 6.1 4.0 5.3 4.0 4.5 3.4 4.4 4.3 6.5 4.6 5.6 4.2 3.7 ## ## $func.thetastar ## [1] -0.0151 ## ## $jack.boot.val ## [1] 0.48419540 0.40000000 0.27959184 0.16121212 0.06189112 ## [6] -0.05893855 -0.13288410 -0.28919668 -0.39884726 -0.52654867 ## ## $jack.boot.se ## [1] 0.9690965 ## ## $call ## bootstrap(x = x, nboot = 1000, theta = theta, func = bias) Compare this to ‘bias.boot’ (our result from above). Why might it not be the same? Try running the same section of code several times. See how the value of the bias ($func.thetastar) jumps around? We should not be surprised by this because we can look at the jackknife-after-bootstrap estimate of the standard error of the function (in this case, that function is the bias) and we can see that it is not so small that we wouldn’t expect some variation in these values. Remember, everything we have discussed today are estimates. The statistic as applied to your data will change with new data, as will the standard error, the confidence intervals - everything! All of these values have sampling distributions and are subject to change if you repeated the procedure with new data. Note that we can calculate any function of \\(\\theta^{*}\\). A simple example would be the 72nd percentile: perc72&lt;-function(x) { quantile(x,probs=c(0.72)) } results&lt;-bootstrap(x=x,nboot=1000,theta=theta,func=perc72) results ## $thetastar ## [1] 4.2 4.3 4.5 5.2 6.0 4.6 5.2 3.5 5.5 4.5 6.0 4.6 4.1 4.8 4.5 4.8 3.6 ## [18] 4.0 4.0 3.3 4.4 5.4 4.5 4.7 5.7 4.9 4.5 3.9 6.4 4.4 5.0 3.4 4.5 4.3 ## [35] 5.2 4.4 5.4 2.7 4.9 4.4 5.0 4.6 3.4 4.2 4.1 3.6 4.1 4.2 4.7 4.9 5.2 ## [52] 5.3 2.6 5.3 2.8 4.5 3.3 3.8 4.3 2.7 4.5 3.4 4.5 5.1 4.3 5.1 4.7 4.0 ## [69] 4.5 5.7 4.8 4.6 5.3 4.6 5.1 4.4 4.2 5.1 3.4 4.5 5.6 4.5 4.4 3.7 5.2 ## [86] 3.5 6.2 3.9 3.6 4.4 5.3 4.8 5.0 4.0 3.3 6.4 6.5 5.6 3.8 3.6 4.7 4.8 ## [103] 4.7 4.0 4.1 5.7 5.4 4.8 4.6 5.1 4.6 4.8 3.8 5.7 4.9 4.4 5.1 5.0 5.0 ## [120] 3.5 4.4 5.0 2.8 3.3 5.8 5.3 5.3 4.9 3.9 6.4 4.0 3.5 3.3 3.9 4.4 4.7 ## [137] 4.3 4.4 5.3 5.2 3.4 4.4 4.6 4.0 5.0 4.6 5.8 5.4 3.7 5.3 4.1 4.8 4.5 ## [154] 3.5 4.5 3.1 5.2 5.6 4.4 6.1 4.5 3.8 5.0 6.3 4.0 4.1 3.5 3.6 5.3 4.6 ## [171] 1.6 4.7 5.4 4.3 5.0 5.1 3.8 3.7 6.3 4.6 3.6 5.7 5.2 4.8 4.8 4.8 4.8 ## [188] 4.9 5.0 4.2 4.8 2.9 4.1 3.9 3.6 5.0 4.1 4.9 2.6 4.6 3.6 3.7 4.9 4.4 ## [205] 3.6 4.6 5.9 4.3 3.8 4.8 3.5 5.1 3.4 3.5 5.7 4.3 5.1 4.8 4.2 5.3 4.7 ## [222] 5.2 3.3 2.9 6.5 5.1 4.9 3.5 4.9 3.6 4.9 4.0 5.2 5.3 4.6 4.8 3.6 4.7 ## [239] 5.2 3.6 3.9 4.6 5.8 5.1 3.6 4.0 3.5 3.6 4.5 5.0 4.8 3.1 3.8 2.9 6.0 ## [256] 4.8 6.3 5.0 3.6 4.7 3.7 3.2 4.8 4.7 4.5 5.1 4.0 3.5 5.8 6.4 3.6 4.0 ## [273] 5.1 3.4 3.9 5.0 3.3 5.5 6.3 4.0 5.2 3.9 4.0 1.8 4.7 4.4 4.4 3.8 3.7 ## [290] 5.7 3.9 1.7 4.7 4.2 4.3 4.7 3.6 4.6 5.1 4.6 5.3 5.0 5.5 4.2 4.0 4.8 ## [307] 4.3 5.8 4.8 4.8 4.1 5.4 5.2 4.5 3.2 6.1 4.3 5.5 4.3 5.3 5.0 5.6 6.1 ## [324] 6.3 4.3 3.4 5.4 4.1 2.3 4.2 5.6 5.5 4.5 4.5 5.2 5.2 5.1 3.5 3.8 3.8 ## [341] 4.1 3.8 3.5 4.5 5.4 3.6 4.1 4.3 4.4 3.6 4.7 4.0 5.0 4.9 5.1 4.1 3.9 ## [358] 3.5 5.3 5.4 4.3 4.7 3.6 3.8 4.3 3.0 4.1 4.6 4.5 4.7 4.2 4.1 3.9 5.0 ## [375] 4.1 5.0 5.2 5.6 5.4 3.4 3.9 3.8 5.5 4.7 5.1 5.9 3.7 4.6 4.1 4.6 4.4 ## [392] 4.5 4.1 4.6 4.6 4.5 6.2 6.0 4.9 3.6 5.4 4.5 3.0 3.0 2.6 3.7 4.8 4.7 ## [409] 5.7 4.5 4.7 4.9 3.6 3.8 3.6 4.9 4.5 3.4 5.2 5.8 5.1 4.4 4.1 4.6 5.5 ## [426] 4.9 5.3 4.4 3.5 4.5 4.0 5.8 4.4 5.6 2.5 4.2 5.8 4.2 4.3 4.0 4.3 2.8 ## [443] 4.2 4.5 4.5 4.0 4.8 2.0 3.0 5.4 5.7 5.6 4.2 6.0 4.4 4.8 4.3 4.7 5.4 ## [460] 4.4 5.0 2.5 4.3 4.5 7.1 4.4 4.6 3.7 3.4 3.6 5.6 2.8 3.7 5.0 3.0 4.3 ## [477] 4.7 4.7 3.8 4.7 3.6 4.5 4.1 4.3 3.5 3.4 5.8 5.3 6.0 4.5 5.3 4.3 4.5 ## [494] 5.6 3.1 4.3 2.9 5.5 4.8 4.1 3.8 5.0 3.8 2.9 4.4 3.8 5.5 4.4 6.3 3.8 ## [511] 4.9 3.7 4.5 4.6 5.0 4.1 3.1 3.6 4.2 4.7 5.4 3.1 5.7 5.3 5.7 4.5 4.1 ## [528] 3.1 5.5 4.7 4.2 3.2 5.2 4.8 3.5 5.0 4.8 4.1 3.5 4.8 5.0 3.6 5.2 6.0 ## [545] 5.0 4.6 4.6 5.8 3.3 4.6 4.3 3.7 5.7 4.3 5.7 5.0 4.3 4.3 4.8 2.7 2.8 ## [562] 3.2 2.7 4.3 3.7 3.8 2.7 6.1 3.8 6.4 4.9 5.5 5.3 3.6 4.8 5.6 6.2 4.5 ## [579] 4.2 5.5 3.7 4.7 3.9 5.1 4.9 3.4 5.9 5.2 5.0 4.7 4.4 4.3 4.4 3.1 5.5 ## [596] 4.4 5.0 3.9 4.0 3.7 4.7 4.5 4.4 4.9 3.8 5.6 4.8 5.3 3.7 4.0 5.0 3.9 ## [613] 4.0 4.6 4.5 6.1 5.3 4.1 5.3 5.6 4.3 4.5 3.3 3.4 4.2 2.4 3.9 3.7 4.6 ## [630] 5.1 6.3 5.5 5.3 4.3 5.0 3.7 5.3 4.3 7.4 5.1 6.8 4.6 5.4 4.6 4.6 4.7 ## [647] 3.1 4.9 4.6 3.2 3.9 5.5 3.9 3.6 4.3 5.6 5.1 5.7 5.3 4.0 4.7 3.6 3.3 ## [664] 5.3 5.5 3.8 5.8 3.5 4.5 2.9 3.8 3.8 5.0 4.7 5.9 4.3 5.1 3.5 5.3 5.3 ## [681] 3.3 5.5 5.3 5.1 5.3 6.1 2.7 3.6 4.2 3.7 5.1 7.0 6.6 3.8 5.0 6.7 3.0 ## [698] 3.8 4.7 4.9 4.1 4.5 4.8 3.8 4.1 3.3 2.4 5.0 4.4 4.4 3.8 5.2 6.8 6.2 ## [715] 4.2 3.1 5.5 4.0 4.2 4.5 4.3 5.7 4.4 3.1 4.5 4.5 5.7 5.3 4.4 5.8 4.9 ## [732] 5.5 5.7 3.4 6.2 6.5 3.8 4.3 3.7 4.1 2.7 3.9 4.8 4.7 6.1 4.0 4.6 4.8 ## [749] 4.3 4.3 4.1 2.8 3.2 4.3 4.5 2.6 5.3 6.1 4.4 3.6 2.9 4.9 4.8 4.2 4.4 ## [766] 4.8 4.7 4.8 3.3 4.5 6.0 3.9 3.7 4.0 3.1 4.2 4.6 4.8 4.7 4.5 4.2 2.5 ## [783] 3.2 4.1 6.3 6.4 6.1 5.0 5.2 2.2 5.3 4.6 5.2 4.6 5.5 5.3 4.4 4.0 5.9 ## [800] 4.1 5.0 5.3 5.1 4.8 5.0 4.1 2.9 3.4 5.1 3.0 5.0 4.9 4.1 4.5 2.6 4.9 ## [817] 4.8 3.8 5.0 4.8 5.4 3.9 4.3 5.2 3.8 3.5 4.4 4.6 5.9 4.4 5.4 3.2 2.7 ## [834] 4.5 5.5 5.1 5.3 3.8 3.8 4.7 3.8 3.8 6.6 6.0 4.1 6.4 6.0 4.4 3.3 4.4 ## [851] 4.8 4.9 3.7 5.4 4.8 4.1 6.4 5.8 4.4 5.7 5.0 4.8 4.9 5.5 3.2 5.1 3.8 ## [868] 4.7 4.1 4.7 3.1 4.2 3.0 4.4 4.4 5.7 5.0 4.3 3.6 5.1 4.5 3.5 3.6 4.9 ## [885] 4.6 3.2 5.4 5.3 4.8 4.2 2.7 5.1 4.1 4.5 4.9 4.3 4.9 4.6 5.1 4.3 4.7 ## [902] 5.9 4.1 2.4 4.0 3.6 4.5 5.1 3.4 3.8 3.7 6.4 5.8 4.8 4.2 2.7 4.0 4.1 ## [919] 4.3 4.4 5.6 6.2 3.6 5.7 4.8 4.0 5.2 3.6 4.6 4.1 4.2 5.8 4.4 4.1 5.7 ## [936] 6.4 3.8 4.6 4.9 3.0 5.9 4.3 3.7 2.7 3.9 6.0 2.9 4.8 4.3 4.2 5.9 5.0 ## [953] 4.4 3.7 4.1 5.1 4.3 4.5 5.3 4.4 6.0 5.4 4.7 4.0 3.4 3.7 3.7 4.2 5.6 ## [970] 4.5 4.1 4.3 4.2 4.2 4.3 3.9 3.9 3.4 4.8 5.0 6.6 5.3 4.7 5.6 3.3 3.8 ## [987] 3.5 5.0 4.5 4.3 5.2 5.8 3.5 4.2 4.8 5.2 3.1 4.5 5.0 4.2 ## ## $func.thetastar ## 72% ## 5 ## ## $jack.boot.val ## [1] 5.400 5.400 5.200 5.284 5.200 4.900 4.900 4.736 4.700 4.500 ## ## $jack.boot.se ## [1] 0.9027518 ## ## $call ## bootstrap(x = x, nboot = 1000, theta = theta, func = perc72) On Tuesday we went over an example in which we bootstrapped the correlation coefficient between LSAT scores and GPA. To do that, we sampled pairs of (LSAT,GPA) data with replacement. Here is a little script that would do something like that using (X,Y) data that are independently drawn from the normal distribution xdata&lt;-matrix(rnorm(30),ncol=2) Everyone’s data is going to be different. With such a small sample size, it would be easy to get a positive or negative correlation by random change, but on average across everyone’s datasets, there should be zero correlation because the two columns are drawn independently. n&lt;-15 theta&lt;-function(x,xdata) { cor(xdata[x,1],xdata[x,2]) } results&lt;-bootstrap(x=1:n,nboot=50,theta=theta,xdata=xdata) #NB: xdata is passed to the theta function, not needed for bootstrap function itself Notice the parameters that get passed to the ‘bootstrap’ function are: (1) the indexes which will be sampled with replacement. This is different that the raw data but the end result is the same because both the indices and the raw data get passed to the function ‘theta’ (2) the number of bootrapped samples (in this case 50) (3) the function to calculate the statistic (4) the raw data. Lets look at a histogram of the bootstrapped statistics \\(\\theta^{*}\\) and draw a vertical line for the statistic as applied to the original data. hist(results$thetastar,breaks=30,col=&quot;pink&quot;) abline(v=cor(xdata[,1],xdata[,2]),lwd=2) 4.3 Parametric bootstrap Let’s do one quick example of a parametric bootstrap. Let’s generate some fairly sparse data from a Gamma distribution original.data&lt;-rgamma(10,3,5) and calculate the skew of the data using the R function ‘skewness’ from the ‘moments’ package. library(moments) theta&lt;-skewness(original.data) theta ## [1] 0.03935636 Lets use ‘fitdistr’ to fit a gamma distribution to these data. We happen to know that the data are gamma distributed, but in general we wouldn’t know that. library(MASS) fit&lt;-fitdistr(original.data,dgamma,list(shape=1,rate=1)) # fit&lt;-fitdistr(original.data,&quot;gamma&quot;) # The second version would also work. fit ## shape rate ## 5.278510 8.201542 ## (2.289916) (3.732768) Now lets sample with replacement from this new distribution and calculate the skewness at each step: results&lt;-c() for (i in 1:1000) { x.star&lt;-rgamma(length(original.data),shape=fit$estimate[1],rate=fit$estimate[2]) results&lt;-c(results,skewness(x.star)) } results ## [1] 1.021976e+00 7.599957e-01 5.277609e-01 -1.046499e-01 ## [5] 6.798362e-01 9.357408e-01 1.378749e+00 1.094702e+00 ## [9] 1.091210e+00 1.443943e+00 9.929700e-01 -3.275076e-01 ## [13] -8.645378e-02 8.276287e-01 1.101549e+00 5.819762e-01 ## [17] 4.229648e-01 1.052006e+00 1.434929e-01 3.267469e-01 ## [21] 4.513122e-01 1.210210e+00 9.022133e-02 2.945496e-02 ## [25] 9.417169e-01 5.231681e-01 -5.460734e-01 -8.764150e-02 ## [29] 1.517695e+00 -5.009359e-01 4.427361e-01 -1.314921e+00 ## [33] -2.028458e-01 -2.285864e-01 -1.110397e-01 1.017076e+00 ## [37] 4.400020e-01 3.051062e-01 5.035575e-01 4.550062e-01 ## [41] 7.664257e-01 3.419242e-01 1.960148e-01 -3.732985e-01 ## [45] 9.327328e-01 5.483916e-02 5.133757e-01 1.684372e+00 ## [49] 1.182333e+00 1.025840e+00 1.365376e-01 5.262915e-01 ## [53] 8.159396e-01 7.131347e-01 2.857985e-01 9.048589e-01 ## [57] 2.140707e-01 1.690683e+00 -1.222624e-01 1.969206e-01 ## [61] -4.741446e-01 -2.791543e-01 -2.177344e-01 6.187781e-01 ## [65] 1.759752e-01 5.083633e-01 9.246793e-01 6.254362e-01 ## [69] 2.344970e-01 6.382210e-03 8.646757e-01 -6.707689e-02 ## [73] 9.536527e-01 1.159399e+00 -3.763190e-01 7.204977e-01 ## [77] 4.243446e-01 2.439296e-01 -8.986276e-01 -8.361064e-01 ## [81] 3.598025e-01 5.602584e-01 -3.572035e-01 1.231401e+00 ## [85] -2.196997e-01 4.350254e-01 1.368023e+00 1.635467e+00 ## [89] 1.496844e+00 8.193085e-02 1.110427e+00 2.769840e-01 ## [93] 1.311180e+00 7.579287e-01 7.088575e-01 -3.340522e-01 ## [97] 6.056184e-01 3.283098e-01 -3.452431e-02 -3.929464e-01 ## [101] 4.885861e-01 -4.646890e-02 2.425848e-01 6.281779e-01 ## [105] 3.045275e-01 1.914542e+00 4.660395e-01 5.975132e-01 ## [109] 4.275724e-01 1.269513e+00 1.532534e+00 1.941846e+00 ## [113] 9.060331e-01 -1.536051e-01 9.136689e-01 1.688739e+00 ## [117] 1.063293e+00 -6.050818e-01 -9.590448e-02 1.312856e+00 ## [121] 6.481170e-01 5.227254e-01 1.272317e+00 5.806718e-01 ## [125] -5.232343e-01 5.952708e-01 7.821955e-01 1.067225e-01 ## [129] 3.738977e-01 -2.584438e-01 1.478692e+00 1.072784e+00 ## [133] -5.127494e-01 1.153718e+00 9.439749e-01 -1.786897e-01 ## [137] 5.190504e-01 9.333983e-02 -1.596084e-01 4.247081e-01 ## [141] 1.239078e+00 4.630453e-01 6.981938e-01 3.866941e-01 ## [145] 8.327875e-01 -2.411298e-02 -4.544481e-01 2.319154e-02 ## [149] 2.791616e-01 3.356638e-01 1.009546e+00 6.744324e-01 ## [153] 1.076874e+00 3.523226e-01 4.168983e-01 7.248479e-01 ## [157] 9.711277e-02 8.607831e-01 6.735881e-01 3.168565e-01 ## [161] -3.052979e-01 -3.700763e-01 -3.126703e-01 1.257324e+00 ## [165] 1.035518e+00 2.575052e-01 7.049854e-01 1.220320e+00 ## [169] 6.908446e-01 2.046292e+00 4.980873e-01 3.281140e-01 ## [173] 2.241847e+00 5.394024e-01 5.865564e-01 -6.630507e-01 ## [177] 4.082576e-02 2.472435e-01 6.858111e-01 5.555293e-03 ## [181] 2.144165e-01 -4.089373e-01 -9.163293e-02 1.749933e-01 ## [185] 8.409336e-01 1.018299e+00 5.340908e-01 1.029599e+00 ## [189] -2.264041e-01 5.414546e-01 1.722799e-01 -1.689877e-01 ## [193] 2.060379e-01 -1.421599e-01 -2.195716e-01 6.699487e-02 ## [197] 7.640655e-01 2.763549e-01 7.250508e-01 5.219367e-02 ## [201] -3.191096e-02 1.915797e+00 6.218113e-01 -6.341933e-01 ## [205] 1.131964e-01 8.248241e-01 1.235904e-01 1.357538e-01 ## [209] 9.273969e-02 4.147561e-01 -4.290591e-01 -3.640299e-01 ## [213] 4.548938e-01 6.594077e-01 7.592456e-01 -1.547353e-01 ## [217] 1.569599e-01 9.552913e-01 -7.813356e-02 -3.257357e-01 ## [221] -1.699960e-01 -1.601854e-01 6.163306e-01 1.746629e+00 ## [225] 9.832855e-01 3.795679e-01 -3.451553e-02 6.967348e-01 ## [229] -5.250554e-01 -1.029592e-01 4.238710e-01 -7.436131e-01 ## [233] 1.720081e-01 -3.323883e-01 1.208340e+00 3.752888e-01 ## [237] 7.086498e-01 5.747390e-01 -3.625179e-01 -4.219246e-01 ## [241] -1.110985e+00 6.569496e-01 4.714801e-01 7.198312e-01 ## [245] 7.647130e-01 4.257491e-02 2.173102e-01 6.757456e-01 ## [249] 3.675996e-01 3.219034e-01 1.177041e+00 9.290708e-01 ## [253] -5.353350e-01 -3.348580e-01 9.504395e-01 7.398353e-01 ## [257] 4.744274e-01 1.161529e+00 1.062060e+00 3.770301e-02 ## [261] 7.242405e-01 1.366893e+00 1.291851e-01 6.888487e-01 ## [265] 1.104399e-01 -1.132685e-01 1.924624e-01 1.029336e+00 ## [269] 8.678625e-01 -2.334055e-02 7.154313e-01 7.070504e-01 ## [273] -3.677774e-02 7.759056e-01 4.598735e-02 7.996935e-01 ## [277] 8.970559e-01 -1.585262e-01 2.079164e-01 2.699198e-01 ## [281] 2.145031e+00 -3.491236e-01 1.807444e+00 1.727037e+00 ## [285] 8.972930e-01 1.606503e+00 1.128162e+00 8.505488e-01 ## [289] 4.012475e-01 -2.701597e-01 9.733840e-01 6.563798e-01 ## [293] 3.797685e-01 5.906185e-01 1.295986e+00 -4.375058e-01 ## [297] 1.045130e+00 3.965145e-01 6.567412e-01 1.661278e+00 ## [301] 1.281813e+00 3.816832e-02 3.595148e-01 -4.205280e-01 ## [305] 1.418792e+00 9.149199e-01 -1.542904e-02 -4.842791e-01 ## [309] 6.337236e-02 4.568180e-01 1.540240e+00 6.425032e-01 ## [313] 5.151846e-01 -6.242996e-01 -3.439867e-01 -3.424082e-01 ## [317] -6.035394e-02 -2.348552e-01 9.794809e-01 1.312491e+00 ## [321] 8.944267e-01 -8.534305e-01 6.012791e-01 6.619185e-03 ## [325] 2.048733e-01 3.697665e-01 3.219161e-01 -5.766666e-01 ## [329] 8.392016e-03 -4.980784e-01 5.420437e-01 4.163610e-01 ## [333] 7.147840e-01 7.454886e-03 -3.179525e-02 1.006208e+00 ## [337] 6.168112e-01 1.437761e+00 2.710426e-01 -3.165970e-01 ## [341] 2.743455e-01 -2.718857e-01 1.011639e+00 1.417550e+00 ## [345] 1.352778e-01 1.657105e+00 5.047001e-01 7.656272e-01 ## [349] -1.104005e+00 -2.654944e-01 1.511306e+00 6.345694e-02 ## [353] 8.570108e-01 1.100003e-01 -9.511561e-01 3.747483e-01 ## [357] 6.670883e-01 -2.395401e-01 -4.588294e-02 5.898157e-01 ## [361] 1.073127e+00 -4.054513e-01 5.597526e-02 1.405754e+00 ## [365] 1.122430e+00 1.410676e+00 8.374948e-01 2.303960e-01 ## [369] -2.936765e-01 -2.834446e-01 3.378509e-01 2.053234e+00 ## [373] 1.878401e+00 -2.731998e-01 1.203257e-01 -4.324858e-01 ## [377] 3.463453e-01 8.649505e-01 -5.903196e-01 -4.522051e-01 ## [381] 9.443195e-01 6.722397e-01 4.016365e-01 7.545500e-01 ## [385] -8.632627e-01 8.357630e-01 4.653929e-01 2.188952e-01 ## [389] 8.984405e-02 -1.255926e+00 -1.138616e-01 1.114365e+00 ## [393] 1.084857e+00 -3.089826e-01 -1.810751e-01 1.895816e-04 ## [397] 1.810396e-01 3.361139e-01 3.934278e-01 -7.964155e-01 ## [401] 7.200029e-01 8.359944e-01 -7.802738e-02 5.786122e-02 ## [405] 1.766443e+00 1.228951e+00 3.344924e-01 2.856981e-01 ## [409] -4.121803e-01 1.206461e+00 3.493709e-02 -2.596712e-01 ## [413] -4.202102e-01 2.862654e-01 8.767010e-02 -4.495519e-01 ## [417] 9.518779e-01 7.481997e-01 1.000375e+00 2.071406e-01 ## [421] 1.261552e+00 6.890203e-01 3.982842e-01 -1.204768e+00 ## [425] 4.886650e-02 6.428578e-01 5.733902e-01 -7.941499e-01 ## [429] 1.001017e+00 6.837879e-01 1.926687e-01 7.888030e-01 ## [433] 3.010374e-01 4.065461e-01 1.418316e-01 6.212433e-01 ## [437] 1.180437e+00 3.089977e-01 2.168416e-01 7.986040e-01 ## [441] 7.229682e-02 8.661242e-01 1.591868e+00 7.783252e-02 ## [445] 4.915818e-01 5.924524e-01 1.220765e+00 4.829950e-02 ## [449] 1.142399e+00 1.647013e+00 -2.885338e-01 3.182412e-01 ## [453] 1.077888e-01 -4.167736e-01 4.716477e-01 7.217040e-01 ## [457] 6.673271e-01 1.206042e+00 9.285319e-01 4.586054e-02 ## [461] 3.594163e-01 1.687970e+00 1.696902e-01 -3.067036e-01 ## [465] 2.467497e-01 3.837512e-01 2.036596e-01 4.857242e-01 ## [469] -1.323518e-01 7.492022e-01 1.200370e+00 2.062081e-01 ## [473] 3.836064e-01 -9.444481e-02 6.701113e-01 4.011514e-02 ## [477] -6.192410e-02 -4.873649e-02 -3.533583e-01 1.411704e+00 ## [481] 1.150813e+00 2.918184e-01 9.347957e-01 9.763703e-02 ## [485] 1.041857e+00 1.136619e+00 5.085979e-01 1.332793e+00 ## [489] -3.608599e-01 1.582708e+00 1.084137e+00 6.795437e-01 ## [493] 3.495205e-01 4.411340e-01 8.303527e-02 2.230257e+00 ## [497] 1.773330e+00 4.523499e-01 1.548227e+00 1.597680e-01 ## [501] 1.830359e-01 1.626827e+00 1.046018e+00 7.341205e-01 ## [505] -1.734220e-01 3.160739e-01 8.497943e-01 5.525033e-01 ## [509] 6.304651e-01 -3.309573e-02 -3.351836e-01 5.034980e-02 ## [513] -4.617826e-01 1.022736e+00 -2.781211e-05 3.705843e-01 ## [517] 1.303049e-02 -2.392977e-01 3.900146e-01 -1.573142e-01 ## [521] -9.433598e-02 1.178727e+00 -1.766452e-01 -3.662553e-01 ## [525] -1.926620e-01 -8.159246e-01 1.035257e+00 2.225898e-01 ## [529] 4.903300e-01 2.472171e-01 -1.890540e-01 -9.845059e-02 ## [533] 8.386879e-01 1.126614e+00 -3.671183e-01 4.145666e-01 ## [537] 6.653977e-01 4.243314e-01 4.354933e-02 2.604189e-02 ## [541] -1.607266e-03 3.709532e-01 5.980204e-01 1.363630e+00 ## [545] -3.434666e-01 1.171161e+00 3.761093e-01 3.396192e-01 ## [549] 6.617366e-01 4.736718e-01 1.188174e-01 4.857268e-01 ## [553] 3.573072e-01 -1.001635e-01 7.135647e-01 7.771344e-01 ## [557] 1.725524e-01 9.378836e-01 -3.870158e-01 1.023077e+00 ## [561] -8.754813e-02 -8.326839e-01 -8.668399e-02 -2.104238e-01 ## [565] 9.727389e-01 1.011207e+00 9.141113e-01 1.286037e-01 ## [569] -4.124398e-01 4.798964e-02 -2.968597e-01 1.598395e-01 ## [573] 1.249629e+00 -1.157005e-01 1.169353e+00 5.242875e-01 ## [577] 1.365339e-01 6.092625e-01 1.079835e+00 -3.065330e-01 ## [581] 4.809706e-01 -5.818824e-02 3.999856e-02 -6.919583e-02 ## [585] -3.102809e-01 2.683253e-01 1.534476e+00 3.396424e-01 ## [589] 1.642994e+00 6.778426e-02 5.732528e-02 9.604829e-01 ## [593] 9.478491e-01 9.159494e-01 5.674188e-01 8.018325e-01 ## [597] 6.406985e-01 -3.842194e-01 4.745288e-01 5.759248e-01 ## [601] 3.339502e-01 1.171137e+00 7.099267e-01 1.539918e-01 ## [605] -5.091120e-02 3.948299e-01 -4.833992e-02 4.283996e-02 ## [609] 8.920090e-02 7.543530e-01 1.644698e+00 1.632851e+00 ## [613] 6.100006e-02 -6.616583e-01 1.017244e+00 2.322486e-01 ## [617] 5.712703e-01 -2.568751e-01 4.937986e-01 4.649228e-01 ## [621] 1.365680e+00 1.981353e+00 -2.683369e-01 -4.326112e-01 ## [625] 5.768642e-01 7.685482e-01 1.123436e+00 9.553459e-01 ## [629] 8.162627e-01 7.629699e-01 7.331945e-01 -5.646800e-01 ## [633] 1.159836e+00 -7.270626e-02 -5.619194e-02 1.303847e+00 ## [637] 5.352424e-04 7.861380e-01 -3.232370e-01 8.788116e-02 ## [641] 5.631619e-02 8.533600e-01 3.840495e-01 1.080533e-01 ## [645] 1.489395e-01 1.204827e+00 6.607782e-01 5.692729e-01 ## [649] -7.050295e-01 5.445867e-01 4.585687e-01 5.385432e-01 ## [653] 8.739706e-01 1.221695e+00 5.122234e-01 1.086558e-01 ## [657] 1.067590e+00 1.570600e+00 7.254370e-01 1.011648e+00 ## [661] 8.645722e-01 3.348948e-01 -4.863375e-01 1.438119e+00 ## [665] 3.164597e-01 1.220011e-01 -2.444566e-02 6.221739e-01 ## [669] 1.638946e-01 5.060201e-01 -3.831727e-01 7.280549e-01 ## [673] 6.716731e-01 8.787402e-01 9.704228e-01 7.702753e-02 ## [677] 7.658393e-01 1.598606e-01 1.425336e-01 7.583493e-01 ## [681] 6.020825e-01 -5.458422e-01 5.373997e-02 3.965934e-01 ## [685] 2.304857e-01 1.697735e-01 1.327657e+00 4.685749e-01 ## [689] -5.194377e-01 1.046955e+00 1.680120e+00 -2.275500e-01 ## [693] 5.721401e-01 1.788106e+00 8.915705e-02 9.035764e-01 ## [697] 1.072491e+00 1.361967e+00 1.942314e-02 4.089000e-01 ## [701] 6.614309e-01 8.965477e-01 2.331504e-01 -4.938705e-01 ## [705] 2.955072e-01 4.870764e-01 1.302576e+00 1.390388e-01 ## [709] 8.261007e-01 -3.879097e-03 9.134673e-02 7.547898e-01 ## [713] 3.339938e-01 6.260422e-01 5.779330e-01 1.703508e-01 ## [717] 4.974883e-01 4.623942e-01 3.624975e-01 6.014876e-01 ## [721] 1.415076e-01 1.303572e+00 4.597433e-01 9.322794e-01 ## [725] 1.113047e-01 2.968557e-01 8.810152e-01 1.334446e+00 ## [729] 5.951084e-01 9.528986e-01 2.159135e-01 2.353826e-02 ## [733] 4.451823e-01 -1.148208e-01 5.248397e-01 4.603973e-02 ## [737] 6.617938e-01 9.729568e-03 4.763240e-01 2.856687e-01 ## [741] 9.215392e-01 -2.816656e-01 1.383158e+00 -9.767020e-02 ## [745] 1.384426e+00 7.319059e-01 -3.588019e-02 -2.371651e-01 ## [749] 8.557144e-01 2.971540e-02 1.074350e+00 5.848841e-01 ## [753] 8.084500e-01 5.112540e-01 9.684080e-01 6.595693e-01 ## [757] -7.653048e-02 7.315797e-01 -1.520371e-01 8.279747e-01 ## [761] 9.255952e-01 -6.892832e-02 -3.952810e-01 2.080261e-01 ## [765] 5.387745e-03 7.231741e-01 1.045711e+00 -2.673969e-01 ## [769] 8.072547e-01 -3.739628e-02 -2.981228e-02 2.209113e+00 ## [773] 2.094959e-01 -3.252680e-02 1.994243e-01 -1.021907e-01 ## [777] 2.774137e-01 1.713797e+00 9.467323e-01 3.807466e-01 ## [781] 8.462522e-01 8.974950e-01 6.430402e-01 5.018813e-01 ## [785] 1.974425e-01 3.486848e-01 -3.333933e-01 7.407092e-01 ## [789] -3.112700e-01 8.294229e-01 3.764447e-01 -5.506857e-01 ## [793] 1.239088e-01 9.078154e-01 -6.830585e-02 8.497346e-01 ## [797] -5.975553e-02 -2.254570e-01 2.383054e-01 -3.099836e-01 ## [801] 2.646767e-01 1.343841e+00 5.016580e-01 2.799453e-01 ## [805] 7.796878e-01 9.171358e-01 3.171356e-02 8.859058e-01 ## [809] 1.066871e-01 3.962087e-01 3.266607e-01 1.119120e-01 ## [813] 1.127756e+00 1.448328e-01 1.703006e-02 7.244082e-01 ## [817] 2.939296e-01 2.995729e-01 1.066402e+00 6.539924e-01 ## [821] 6.463688e-01 -8.098684e-02 6.225948e-01 -5.337543e-01 ## [825] 2.988300e-01 -1.031822e+00 -3.603250e-03 1.534249e+00 ## [829] 1.562381e+00 1.443868e+00 6.666098e-01 4.283274e-02 ## [833] -4.988051e-01 7.450848e-01 5.619024e-01 5.419729e-03 ## [837] 6.124508e-01 6.314368e-01 1.271386e+00 -4.388381e-01 ## [841] 4.843876e-01 5.792832e-01 1.093928e+00 -7.558861e-02 ## [845] 7.521458e-02 3.376075e-01 -2.321982e-01 4.721415e-01 ## [849] 1.249022e+00 1.511681e+00 -7.183177e-01 5.874655e-01 ## [853] -2.634583e-01 2.719416e-01 1.307878e+00 2.521327e-01 ## [857] 1.099456e+00 9.093265e-01 7.233280e-01 1.289783e+00 ## [861] 5.325812e-01 1.853792e-01 9.659210e-01 3.796446e-01 ## [865] 4.489047e-01 -6.582222e-02 1.299610e+00 2.404278e-01 ## [869] 5.628020e-01 1.027405e+00 1.234652e+00 -6.469127e-02 ## [873] 1.071076e+00 9.535410e-02 1.284147e+00 4.277760e-01 ## [877] 6.843786e-01 5.181454e-01 5.216320e-01 -5.331244e-01 ## [881] 7.132524e-01 4.616669e-02 1.279619e+00 2.735544e-03 ## [885] 2.801127e-01 4.500665e-01 4.646640e-01 2.392340e-01 ## [889] -5.655395e-01 2.454119e-01 5.922763e-01 8.643486e-01 ## [893] 1.420520e+00 -1.917842e-01 1.051191e+00 7.759736e-01 ## [897] 3.754114e-01 4.188238e-01 1.512236e+00 6.347722e-01 ## [901] -8.781499e-01 1.508790e+00 7.272690e-01 3.625454e-01 ## [905] -5.678127e-01 3.363094e-01 -2.717671e-01 4.702334e-01 ## [909] 6.529809e-01 4.923340e-01 -5.300304e-02 6.255580e-01 ## [913] 2.482079e-01 1.259018e+00 9.242065e-02 1.076427e+00 ## [917] 9.796389e-01 1.514639e+00 2.425405e-01 1.075085e+00 ## [921] 2.582142e-01 6.871023e-02 -2.497661e-01 8.061422e-01 ## [925] -4.156146e-01 1.695048e-01 1.093961e+00 -3.031552e-01 ## [929] 5.932635e-01 1.265966e-01 1.721019e-01 1.508315e-01 ## [933] -1.763122e-02 1.157423e+00 3.969518e-01 3.345039e-01 ## [937] 1.246880e-01 3.236336e-01 6.351878e-02 1.468529e+00 ## [941] 2.036810e+00 8.220045e-01 6.264052e-01 9.858681e-01 ## [945] -9.722555e-02 1.067720e+00 1.765194e-01 8.709371e-01 ## [949] 1.651935e+00 1.083629e+00 -7.879695e-02 2.184819e+00 ## [953] 6.167281e-01 2.500543e-01 2.558212e-02 1.379799e+00 ## [957] 8.526649e-02 8.086549e-01 7.240052e-01 9.581489e-01 ## [961] 1.385072e+00 4.019848e-01 7.307640e-01 9.073752e-01 ## [965] 6.107540e-01 3.988585e-01 6.496435e-01 9.923935e-01 ## [969] 1.143736e+00 9.527753e-02 1.985779e-01 1.422296e+00 ## [973] 6.842281e-01 9.382751e-01 2.610426e-01 1.042008e+00 ## [977] 5.421514e-01 4.187470e-01 5.686367e-02 7.665052e-01 ## [981] 8.028586e-01 5.334357e-01 4.526052e-01 1.502583e-01 ## [985] 1.002538e-01 2.034720e+00 -8.523213e-02 -2.854755e-02 ## [989] -1.254157e+00 4.667574e-01 6.238299e-01 2.864843e-01 ## [993] 1.927864e-01 8.423530e-01 2.902871e-01 1.502387e+00 ## [997] 6.747675e-01 2.117203e-01 1.036006e-01 7.967163e-01 hist(results,breaks=30,col=&quot;pink&quot;,ylim=c(0,1),freq=F) Now we have the bootstrap distribution for skewness (the \\(\\theta^{*}\\) s), we can compare that to the equivalent non-parametric bootstrap: results2&lt;-bootstrap(x=original.data,nboot=1000,theta=skewness) results2 ## $thetastar ## [1] 0.322865238 -0.499761516 -0.988958330 -0.900107102 0.289467956 ## [6] 0.824145523 -0.664082238 0.093970387 -0.274611254 -0.288988637 ## [11] -0.858286001 0.043043078 -0.723133785 -0.019138018 -0.641623580 ## [16] 0.225899531 0.513732691 0.208206149 -0.019153791 -0.551552508 ## [21] 0.441806569 0.397858982 -0.294542312 0.431026353 0.032243568 ## [26] -0.063092136 0.143456537 1.135714220 0.046160358 0.205906844 ## [31] 0.631901703 0.137348983 0.347748594 0.812121592 0.229522544 ## [36] -0.644019953 0.711405917 0.604486609 0.083077730 -0.628983455 ## [41] 0.387512655 -0.065500378 -0.884956207 0.219671715 0.332304630 ## [46] -0.486102126 1.013277965 0.325962190 -0.569677951 0.449016566 ## [51] 0.347483465 -0.136532228 0.164037636 -0.587668349 0.207523497 ## [56] -0.106178208 -0.846508738 -0.612013687 -0.203471064 0.024251586 ## [61] 0.339726779 -0.148982211 -0.255746354 -0.507730800 0.683160797 ## [66] -0.422461435 0.050047741 -0.070899471 0.296757281 0.402344917 ## [71] -0.353541230 0.048306256 -1.301818950 -1.016778492 -0.376127110 ## [76] 0.228143160 0.149066135 0.914935047 0.381873650 -0.174065966 ## [81] -0.096924486 0.091539291 -0.075109098 -0.257048043 -0.248668271 ## [86] -0.130320219 0.362306536 0.367159981 0.037823649 0.588123718 ## [91] -0.500683695 0.131312013 0.543649012 0.077616020 0.811915531 ## [96] 0.422142204 -0.144433382 -0.013801673 -0.021497877 -0.115252831 ## [101] -0.351786526 -0.003280330 0.332825724 -0.022014973 0.294502827 ## [106] 0.017490201 -0.012410908 0.057925247 -0.720777870 0.612346281 ## [111] 0.127951249 -1.150355843 -0.629401589 0.124644950 0.090140761 ## [116] 0.264629211 0.410439720 -1.123699357 0.017347072 0.251978650 ## [121] 0.123973924 0.273805538 -0.233899669 0.091513752 0.304315718 ## [126] -0.131173578 1.275482959 -0.077101236 0.300755858 -0.112449915 ## [131] 0.580949231 -0.199733037 0.511656892 -0.286405560 0.488506619 ## [136] -0.610349802 -0.046220169 0.396093808 -0.147999511 -0.071819785 ## [141] -0.797984571 1.070793896 -0.577851821 0.127749140 -0.200455486 ## [146] -0.270828287 -0.078527504 0.483308095 -0.593297280 -0.721912187 ## [151] 0.691648012 0.303107509 0.172233417 -0.211022777 0.076237461 ## [156] -0.366995751 -0.538165243 0.047208088 -0.398651250 0.418047800 ## [161] 0.010411962 -0.477260732 -0.018887305 -0.314054084 0.185097043 ## [166] 0.013204863 -0.012840618 -0.583710716 -0.445458169 2.100749325 ## [171] -0.767067300 -0.327957355 -0.245279763 0.718662365 0.051984296 ## [176] -0.275953685 0.864284978 -0.166234586 -0.049208207 -0.055075791 ## [181] 0.121422057 0.771014841 0.252629105 -0.309039386 -0.258778059 ## [186] -0.622114353 -0.224264660 0.433266663 0.027427570 -0.921464878 ## [191] 0.121422057 -0.320083775 0.624439755 0.234065075 -0.049208207 ## [196] 0.544156455 -0.089219710 0.085581719 -0.174901270 -0.372163371 ## [201] -0.469319904 -0.365648753 0.645572073 0.464981810 0.652175245 ## [206] 0.549815438 0.800723925 -0.494496360 -1.452943221 0.611791187 ## [211] -0.060624103 -0.344738938 0.361008573 -0.257664557 -0.260405525 ## [216] 0.732843119 0.096941047 0.504138700 0.185794280 -0.134449703 ## [221] 0.612321872 0.396077820 -0.094575409 -0.294162053 0.632521615 ## [226] -0.665023655 0.517578307 0.658543676 0.030149809 -0.628892844 ## [231] 0.538195986 0.347441644 -0.199675911 1.033411061 0.104999066 ## [236] 0.072694721 -0.272497153 -0.191941477 0.108038491 1.093851827 ## [241] -0.311938885 0.270031361 0.131831233 0.613980634 0.012098710 ## [246] -0.456225564 -1.024609653 0.016922663 0.232202397 0.558603880 ## [251] 0.375300635 -0.643732527 0.006546405 -0.465185285 -0.141145570 ## [256] -0.421037891 0.074506550 -0.452977512 -0.060945460 0.788894464 ## [261] 0.754502524 -0.344861029 -0.751865676 0.754985003 -0.852505043 ## [266] 0.500567205 0.680309463 -0.201766155 0.715736264 0.194544238 ## [271] 0.087784435 -0.238483349 -0.880493767 -0.312629264 -0.315143148 ## [276] 0.528493214 -0.116431470 0.168267337 0.096343020 -0.343700828 ## [281] -0.119632082 -0.082637221 -0.294688160 -0.413752715 0.806774214 ## [286] 0.066321170 0.113066571 0.348341043 -0.011154572 -0.144044601 ## [291] -0.230942845 0.488577169 -0.903176404 0.483729992 -0.261881085 ## [296] 0.084547532 0.545476774 0.655541950 -0.287244939 -0.318169210 ## [301] -0.493930189 -0.154476896 0.551529786 -0.223295529 -0.422093716 ## [306] -0.027913779 -0.136724148 -0.763861112 -0.161048233 -0.352133892 ## [311] 0.589201651 -0.298126110 -0.363809172 -1.037098259 0.685360283 ## [316] -0.099605855 0.332310156 -0.151164542 -0.181005466 0.033314349 ## [321] 0.306848222 0.883014101 0.518838765 0.164863756 -0.323428174 ## [326] 0.225658895 0.027527546 -0.254467399 -0.146091663 0.024464808 ## [331] -0.835674465 1.507607244 0.424574975 0.576214430 -1.031855043 ## [336] -0.776331062 -1.296703712 0.178299178 0.146180348 -1.144974799 ## [341] -0.325348481 0.309349818 0.289230886 -0.198295325 0.064700679 ## [346] -0.997309912 0.267496769 -0.895619257 0.108142235 -0.683898439 ## [351] 0.517501760 0.473277008 -0.419674980 0.216180424 0.157717415 ## [356] -0.534959250 0.344612887 -0.256292973 -0.173439210 -0.127457123 ## [361] -0.655814086 0.447038890 0.157402424 0.065552054 -0.475643044 ## [366] 0.319253850 -0.594907989 0.430000245 -0.350215315 -0.264867688 ## [371] 0.638340936 -0.967302376 0.542200341 -0.341829217 -0.778825708 ## [376] 0.407826028 -0.200855040 0.674157376 -0.735473280 0.503941137 ## [381] 0.084308840 0.038227467 -0.129628125 -0.081094124 -0.115977699 ## [386] -0.742196121 -0.198093886 -0.947652195 0.117946311 -0.347221674 ## [391] -0.202345006 0.042800502 -0.323672623 0.606904770 -0.505565545 ## [396] 0.353560690 -0.594738723 0.141150454 -0.177343968 -0.158101466 ## [401] -0.414967115 0.307732503 -0.264202071 -0.098259052 -0.669101498 ## [406] 0.126525493 -0.288158934 0.566391667 0.026679741 0.581593051 ## [411] 0.229901743 0.036831463 -0.283294038 0.709913767 0.068780909 ## [416] 0.951961498 -0.147416503 -0.501796990 -0.241347750 0.327742941 ## [421] 0.536905116 0.176820356 -0.483919456 -0.633000679 0.268502894 ## [426] 0.169085360 0.429345511 0.202635668 -0.482585574 -0.985496817 ## [431] 0.348437728 0.117845279 0.507397190 -0.251233821 0.085966445 ## [436] -0.328236708 0.206183533 0.268237121 0.280520802 -0.439251361 ## [441] 0.160646335 -0.459096881 -0.118051491 0.293003244 -0.367800917 ## [446] 0.626932387 0.415044567 -0.189623839 0.073857113 0.491361104 ## [451] 0.146671315 0.039762086 -0.708080991 -0.650077384 0.732252839 ## [456] 0.362603434 0.130086254 -0.334076566 -0.059811366 0.257879427 ## [461] 0.278517079 0.571274140 -0.260405525 -0.656081519 0.956196798 ## [466] -0.154347986 0.316584085 -0.545486320 -1.206742705 0.379854740 ## [471] 0.398833214 -0.157805626 -0.568281876 0.428667322 -0.199885129 ## [476] 0.209032259 -0.426975744 0.145491554 0.136265772 0.793735319 ## [481] 0.108277878 0.062773604 -0.405351987 0.019777746 -0.037501158 ## [486] 0.154580489 -0.293780187 0.748921900 -0.200855040 1.191858112 ## [491] -0.263828455 0.111226136 -0.174494125 -0.174717861 -0.201207328 ## [496] 0.341184210 0.563588512 0.457803164 -0.123591291 -0.249855273 ## [501] -0.358624275 -0.669015883 -0.137706500 0.372322160 0.231047496 ## [506] -0.266449674 -0.266097392 -1.000182140 -0.085015098 -0.015209936 ## [511] -0.652186638 -0.121209783 -0.263402650 -1.029895808 0.569832769 ## [516] -0.509655521 0.340257774 0.034403705 -0.533482001 0.418881524 ## [521] 0.121978337 0.084787869 -0.013567085 -0.522958374 0.272109529 ## [526] 0.203406930 -0.039412713 0.255249903 0.088071681 0.292756922 ## [531] -0.363086865 -0.107455323 0.144549933 -0.133021421 0.038621942 ## [536] 0.215759164 0.181621037 -0.174901270 -0.560181489 -0.337418656 ## [541] -0.094693734 0.613046526 0.461385257 -0.490431823 0.309718666 ## [546] 0.123045946 0.379756872 0.088690239 0.267447946 -1.081218755 ## [551] -0.182597488 -0.002616297 -0.690641016 0.700595150 0.298264014 ## [556] 0.254994409 -0.551623230 -0.417077273 0.043629198 -0.034877058 ## [561] 0.704995800 -0.054956647 -0.526823571 -0.046027337 -0.922347454 ## [566] -0.087554161 0.180682329 -0.059585542 -0.239103613 0.055320841 ## [571] 0.593977390 0.701851762 0.695938668 -0.854039478 0.198050277 ## [576] 0.563607948 0.488184643 0.268348619 0.504391010 0.492347192 ## [581] 0.188878758 0.330224020 -0.279704833 0.094958942 -0.221773030 ## [586] 0.275571336 -0.608307928 -0.131189879 -0.645721446 0.410335467 ## [591] -0.023886075 -0.468043507 0.315006712 0.304315718 -0.137827332 ## [596] -0.566068784 0.175431292 0.589772419 -0.833899599 -0.014920680 ## [601] 0.641543521 0.076544785 0.601362486 -0.094693734 -0.687290176 ## [606] -0.079500952 -0.618729186 0.067938273 -0.691193896 0.005043465 ## [611] 0.102528313 0.792706170 0.247600272 0.243494356 -0.720412898 ## [616] -0.095488696 -0.246812574 -0.435785313 -0.107985256 0.032399677 ## [621] 0.446410017 -0.488545865 -0.002464350 0.366678570 -0.215057662 ## [626] -0.132642037 0.722050724 0.248427562 0.294534398 0.047457978 ## [631] -0.274384226 0.073663021 0.104251985 -0.426128324 -0.268923380 ## [636] -0.318167391 0.568205391 -0.690568042 0.220614889 -0.263925590 ## [641] -1.425322047 -0.416156813 -0.386776652 0.221683411 0.721420830 ## [646] 0.150446780 0.060593932 -0.185668246 0.551326638 -0.058506939 ## [651] -0.061059098 0.642693645 -0.236315723 0.028262355 -0.683930679 ## [656] -0.481844146 -0.143154646 -0.179773281 0.709731172 0.173510789 ## [661] -0.123574892 0.769022702 -0.135563525 0.155914470 0.304851420 ## [666] -0.966351028 0.792320818 0.056972408 0.093383080 -0.551333080 ## [671] -0.121528825 0.366071253 0.316783757 0.309343819 -0.240924508 ## [676] -0.085707364 0.575690011 0.018552230 0.671345572 -0.264459239 ## [681] 0.075779690 0.274621918 0.230462383 -0.138438326 0.043502530 ## [686] 0.144610314 -0.631024227 0.934163367 0.592476782 0.164103420 ## [691] 0.048553701 0.855846606 -0.793986324 0.493953203 -0.632952314 ## [696] -0.178252021 -0.448122884 0.352726452 -0.562125572 -0.196539083 ## [701] -0.853219117 0.378281883 -0.023647151 -1.145241443 0.602947155 ## [706] -1.598676029 0.011390234 -0.624999626 0.529311815 -0.096389986 ## [711] -0.010755753 1.251821946 -0.027747325 -0.007616461 0.273211286 ## [716] 1.713816946 -0.304666354 -0.182274362 -0.215145362 -0.488014229 ## [721] 0.172329138 -0.587872631 -0.691460617 -0.497163606 0.799159483 ## [726] -0.434786464 -0.589638910 -0.323031217 0.024594134 -0.392945569 ## [731] -0.350225758 0.660733176 -0.194756806 0.010483356 0.093148413 ## [736] -0.080851193 0.228143160 0.031481298 -0.408216729 0.721843509 ## [741] -0.180795419 -0.225153360 -0.650409013 -0.055317658 0.251914675 ## [746] -0.631992327 -0.233174928 -0.193369547 -0.048158590 -0.310370858 ## [751] 0.068945154 -0.757205353 -0.030070904 0.134633844 -0.014920680 ## [756] 0.066858627 -0.133679914 -0.186938078 0.429825995 -0.080411580 ## [761] 0.033518065 -0.572977880 -0.083976284 -0.471116530 0.076664181 ## [766] -0.974506255 0.237881171 0.283787833 -0.179050669 0.190000609 ## [771] -0.001014282 -0.290377427 0.681414784 0.324342597 -0.543740832 ## [776] -0.633009120 0.053568485 -0.345188204 -0.582610783 0.437771100 ## [781] -0.092818015 0.184085549 0.338111151 0.355182327 0.330468503 ## [786] 0.082080873 0.060766057 0.309278233 -0.243768541 -0.370443167 ## [791] -0.020613589 -0.190710482 -0.209723945 -0.595141506 -0.124584975 ## [796] 0.701291990 0.008139397 -0.064837482 0.251314193 -0.087594728 ## [801] 0.270929497 0.053393757 0.073100073 -0.030796977 0.004694331 ## [806] 0.690444084 0.067585668 -0.617548413 0.607834209 1.230237421 ## [811] 0.088403357 0.793035333 -0.172448979 0.334926034 0.653950876 ## [816] 0.555952445 0.056027026 -0.502146356 0.409791504 -0.436638725 ## [821] -0.099053588 -1.037021227 -0.367298598 -0.032329410 0.303674451 ## [826] 0.092704514 -0.132247254 -0.756959365 -0.933152608 -0.317306524 ## [831] -0.642510206 0.300616176 0.756739123 0.412566612 -0.283446791 ## [836] -0.299574825 -0.040470874 -0.603152988 0.381136353 0.227997973 ## [841] -0.443658659 -0.416285073 0.608288032 -0.435129027 -0.766983954 ## [846] -0.021816821 0.134309695 -0.800464464 0.178981850 -0.541352282 ## [851] -0.633146600 -0.316230687 -0.363950201 -0.010806009 -0.719579308 ## [856] -0.250822240 -0.435165853 0.312176274 1.032195666 0.654124180 ## [861] -0.129062378 -0.243436898 0.114011692 0.846953720 -0.503281821 ## [866] 0.740886759 0.308694191 -1.224583682 -0.201677674 1.075075621 ## [871] -0.086170675 -0.035393884 0.227704163 0.077976301 -0.693454001 ## [876] -0.242563435 -0.125330627 0.563577427 -0.222959696 -1.121262420 ## [881] 0.120848144 -0.598249904 0.230462383 -0.012643891 -0.991175603 ## [886] -0.047539894 0.655324427 -0.307110949 0.609323977 0.680834890 ## [891] -0.349159543 0.383027888 0.074649616 0.464002580 0.727011690 ## [896] 0.160708429 -0.271014038 0.658543056 0.376635010 0.375306971 ## [901] 0.276906905 0.503941137 0.113125920 -0.745288562 0.635153244 ## [906] 0.253926109 -0.566817309 0.666356253 -0.002703819 0.479649085 ## [911] -0.110801732 0.167229800 0.386847826 0.204441182 0.251605252 ## [916] -0.423036762 0.196831856 -0.622305606 0.102118345 0.150446780 ## [921] 0.124644950 -0.383647685 -0.375490022 0.183050074 0.266027451 ## [926] -0.623786863 -0.693909625 1.403877311 0.064303693 -0.893553579 ## [931] 0.412096516 -0.060487366 0.123265449 0.304564415 -0.509445205 ## [936] 0.355377877 -0.260829327 0.453100777 -0.339114429 -0.246073514 ## [941] 0.338845012 0.160708429 0.287926925 -0.561271067 0.182534713 ## [946] -1.084886210 0.069083436 0.213429843 0.092756823 -0.059156588 ## [951] -0.235493475 0.518218449 0.073682988 0.118633290 0.551357839 ## [956] 0.014105123 1.069187999 0.147314216 -0.695400638 -0.713627679 ## [961] -0.854535964 0.291509205 -0.219356353 -0.488358812 0.537508004 ## [966] 0.189644859 0.001930233 0.037197171 -0.166070581 -0.103344033 ## [971] -0.311326068 0.156391261 -0.510265093 -0.068062731 -0.810527932 ## [976] 0.064871159 0.636106594 -0.109333247 0.722151898 0.221438589 ## [981] -0.177945464 -0.504573639 0.364421832 -0.291922768 -0.172809363 ## [986] -0.218579317 -0.373243075 -0.532670882 -1.655614887 0.391286903 ## [991] 0.627291290 0.325873979 -1.506631979 -0.513419826 -0.391115134 ## [996] 0.051472968 -0.395671534 0.619234685 -1.200832054 0.289670020 ## ## $func.thetastar ## NULL ## ## $jack.boot.val ## NULL ## ## $jack.boot.se ## NULL ## ## $call ## bootstrap(x = original.data, nboot = 1000, theta = skewness) hist(results,breaks=30,col=&quot;pink&quot;,ylim=c(0,1),freq=F) hist(results2$thetastar,breaks=30,border=&quot;purple&quot;,add=T,density=20,col=&quot;purple&quot;,freq=F) We can compare the two empirical distributions for \\(\\theta^{*}\\) more formally by looking at the qqplot: qqplot(results,results2$thetastar) What would have happened if we would have fit a normal distribution instead of a gamma distribution? fit2&lt;-fitdistr(original.data,dnorm,start=list(mean=1,sd=1)) ## Warning in densfun(x, parm[1], parm[2], ...): NaNs produced ## Warning in densfun(x, parm[1], parm[2], ...): NaNs produced ## Warning in densfun(x, parm[1], parm[2], ...): NaNs produced ## Warning in densfun(x, parm[1], parm[2], ...): NaNs produced fit2 ## mean sd ## 0.64359801 0.26089873 ## (0.08250342) (0.05833551) results.norm&lt;-c() for (i in 1:1000) { x.star&lt;-rnorm(length(original.data),mean=fit2$estimate[1],sd=fit2$estimate[2]) results.norm&lt;-c(results.norm,skewness(x.star)) } results.norm ## [1] 0.6182145123 0.0763975501 -0.2365802295 0.0247875434 ## [5] 0.1078320788 -0.3346880596 -0.3117408186 -0.5593858436 ## [9] 0.2389784134 0.5393171071 0.7914222142 0.5167952159 ## [13] 0.3895133604 0.3889448140 0.3504403360 -0.1781994435 ## [17] 0.2377095452 -0.2207474988 0.1137653690 0.3657777842 ## [21] 0.5141657720 0.9211589171 -1.0584865777 0.0296982162 ## [25] -0.1386925707 -0.9426317589 0.8387394066 0.6811469084 ## [29] -1.3154706720 0.5728761224 0.2830230468 0.0940502729 ## [33] 0.2343098707 0.4852694684 -0.0102947175 -0.0628710028 ## [37] 0.2486852372 -0.4906147779 0.4395264525 -0.7747744256 ## [41] -0.3678900786 -0.0469795971 0.1824234728 0.2049428118 ## [45] -0.4284566610 -0.0779041765 0.6062801800 -0.0611744010 ## [49] -0.5820539391 -0.3192343930 0.3116825915 -0.4316116637 ## [53] -0.4395440962 0.0867707887 -1.1683841581 -0.8743419264 ## [57] 0.9022165587 0.3721740415 0.2349502223 -0.0104326805 ## [61] -0.1087653456 0.1957705542 0.5488970664 -0.4002434743 ## [65] 0.2685522783 -0.2307776520 -0.4546787598 -0.5062905248 ## [69] 0.4003728218 -0.4651887206 -0.0396413324 -0.2170386582 ## [73] -0.7206625744 0.6475237344 0.6139584928 -0.3955214058 ## [77] 0.5027262841 0.6038056383 -1.0710846779 -0.1723035331 ## [81] -0.5257777559 -0.1633320902 -0.2819854944 0.0932384617 ## [85] 0.2486728601 -1.1016967294 0.5954606630 0.5194372627 ## [89] 0.1083629275 -0.2843144451 1.0205874754 -0.8795624023 ## [93] -0.0515305151 -0.3929571215 0.9815022145 0.0540877016 ## [97] 1.0703165814 -0.0113212370 0.0072519666 -1.4304218622 ## [101] -0.1821379916 -1.0500982745 0.3327519376 -0.4386596325 ## [105] 0.9262230864 0.1266320496 0.6197206174 0.1174640155 ## [109] 0.3283346551 -0.3023342035 0.0648308795 0.1643069744 ## [113] -0.8147613549 -0.3126292404 -0.7899757666 -0.2057516264 ## [117] 0.5627079955 -0.9792271278 -0.0612297762 0.7963903164 ## [121] -0.7321882039 -0.0604376400 -0.1084327348 0.9697737314 ## [125] -0.3804565506 -0.1731111447 0.3012668042 0.7995064637 ## [129] 0.5525369077 -0.3976023276 0.6981220198 1.5981735552 ## [133] -1.0498118613 0.0918075349 -0.6269191080 -0.0747349930 ## [137] -0.2768441495 0.5354624629 0.9286365516 -0.1517999128 ## [141] -0.3316920416 -0.0224842665 -0.9511866329 1.3027138150 ## [145] 0.5847604786 0.8946995657 0.9000808667 0.5336702623 ## [149] 0.4251508819 0.0167753880 0.4664708282 -0.6211114033 ## [153] 0.3029796348 -0.2847447510 0.8833458830 -0.3754780754 ## [157] -0.0371587927 -0.3952405070 0.1809579361 -0.7048963361 ## [161] 0.0063934515 0.3611744040 -0.5336439074 -0.7080784192 ## [165] 0.5355871690 -0.5088450416 0.4501244484 0.1215668078 ## [169] 0.8661252297 -0.3536412037 0.8596336076 -0.3585776247 ## [173] 0.5189786425 -0.5412028991 0.1719537802 -0.2207156074 ## [177] -0.3135080583 -0.1440356627 -1.0071501910 0.1220126684 ## [181] 0.4446672673 -0.5968254680 -0.7525643150 0.0006499355 ## [185] -0.3829129518 -0.8059177589 0.0979728131 0.8418456027 ## [189] -0.2928394193 -0.5049820356 0.7280947355 -0.8925197232 ## [193] 0.9470697850 -0.9892932793 -0.2807983955 -1.1081409926 ## [197] -0.3729021441 -0.2529572125 0.5382225973 0.7331694889 ## [201] -1.4362642857 -0.3595875053 -0.8087512876 0.2542823232 ## [205] -1.0829753472 -0.6722232541 0.3556210768 -0.3587152768 ## [209] -0.6191074607 -0.4661237126 0.0693374702 0.9537073082 ## [213] 0.1431776498 1.0996168099 0.3043953638 0.1536684798 ## [217] -0.2315573724 1.3425315405 0.1727483295 0.2483426431 ## [221] 0.0574224141 -0.3180836587 -0.7332125184 -0.1931926331 ## [225] -0.7991603634 0.1068242410 -0.0414701585 0.5786846589 ## [229] -1.3761539308 0.9961807744 0.4072079781 0.0046853867 ## [233] 0.1877708642 1.7734026390 0.1036170547 -0.4308871201 ## [237] -0.1127364060 -0.4637592922 1.1198766783 -0.7168782631 ## [241] 0.1444998806 -0.2909337592 0.4802976503 -0.4296954031 ## [245] -0.0824158461 0.3361202045 0.4320018988 -0.4273732832 ## [249] 0.5598538232 -0.2074794257 -0.5626490157 0.0896945353 ## [253] -0.4593933168 -0.4090342591 1.2476690556 -0.4007391706 ## [257] 0.5842790823 0.4834867512 0.4110545500 -0.3337842382 ## [261] 0.0230855975 -0.4438080455 0.4114079512 -0.7211498446 ## [265] -0.9618119980 0.3228862302 -0.7409144048 -0.1594123134 ## [269] -0.0932709282 -1.0180010861 0.2912397366 -0.0375999777 ## [273] 0.1875411438 0.4711400917 0.0603733182 -0.1013363861 ## [277] -0.3867220900 0.3762910390 -0.0644637468 -0.1195696416 ## [281] -0.7755347495 -0.0066399312 0.4409440486 -0.6090686709 ## [285] 0.1126292182 -0.0160596909 0.2513660629 -0.1917465351 ## [289] 0.1759040332 -1.5581150979 -1.4890089176 0.3558784275 ## [293] -0.7934171042 -0.1860678125 -0.1271490972 -0.7659782914 ## [297] -0.3710448059 -0.2652569648 0.5655423004 -0.0013192693 ## [301] -0.2063777508 -0.1606143466 0.6497574961 -0.2018421039 ## [305] -1.0714418317 -0.3804197368 -0.5172070439 -0.3592527074 ## [309] -0.2100244289 0.4330558104 0.8833414365 -0.1961269924 ## [313] 0.7604369092 -0.3643514905 -0.1905202095 -0.5187802911 ## [317] 0.4614730707 -0.5260796853 0.2161877341 -1.0064023786 ## [321] 0.8039524992 -0.2959870065 -0.3038925969 -0.0536916975 ## [325] -0.4744686397 -0.3947241505 -0.5062022179 -0.1876702756 ## [329] -0.5900077344 -0.1421734888 0.0198977126 0.8614724114 ## [333] -0.1260346227 -0.0176984610 -0.3409981997 -0.0393627463 ## [337] 0.1540671520 -0.0768141417 0.6480994074 -0.0707671108 ## [341] 0.5085008627 -0.7188441526 0.0012749145 -0.7054102039 ## [345] -0.7696570215 -1.0125795881 0.0072400075 0.3726102281 ## [349] -1.5921274964 -0.2040954087 0.2097196218 0.4545372229 ## [353] 0.5201665287 0.2580432510 0.3552603827 -0.4389511685 ## [357] 0.0919663001 0.3796317668 1.0714468127 0.1398117816 ## [361] -0.4570164627 -0.6978008989 0.3770234929 -0.7094950637 ## [365] -0.0130963409 0.1865247157 -0.4707599265 0.2613299728 ## [369] 1.1693579668 0.0755529517 0.5959903005 -1.8948517299 ## [373] -0.5891911593 0.3258618031 0.0692642062 0.1416900379 ## [377] -0.1780438792 -0.2330696777 0.9732675774 -0.0129491186 ## [381] -0.7516087370 -0.3876445508 -0.6211079978 0.2223037329 ## [385] 0.3402061951 0.4065091637 -0.9387255881 0.8584735624 ## [389] -0.4265587788 1.2478824155 0.4699440201 -0.1846964856 ## [393] -0.1786974347 -1.7780721266 -1.7047726375 0.3259544585 ## [397] 0.6177376025 0.5716956014 0.3522698484 0.6456618284 ## [401] 0.1952858661 0.1705158837 0.0910917952 -0.4495827297 ## [405] 0.3086631594 0.1317329007 0.4208257720 -0.6510617644 ## [409] -1.5889625947 -0.4328948770 -0.1186906321 -0.0556670874 ## [413] -0.2896178376 1.4396832243 0.5303942183 -0.5176354420 ## [417] -0.5495423997 0.0614445229 1.1057308804 0.3225981744 ## [421] 0.3469234373 -0.3392649158 -0.0130624355 0.1606707672 ## [425] 0.9002559807 0.5878254142 0.0668457316 0.3027969069 ## [429] -1.0956954427 0.2819317205 0.4451509076 0.0199525349 ## [433] 0.1976526343 0.1239839836 0.1783816542 -0.8037736595 ## [437] 0.0447586354 0.4375613541 -0.0749102120 0.3297294213 ## [441] -0.6470389667 0.4381265407 -0.0544913829 -0.0600292357 ## [445] -0.7842210910 0.4842583327 0.5088152858 0.3017611141 ## [449] -0.1609341504 -0.2952528050 -1.2881093701 -0.1733954281 ## [453] -0.7304291708 -0.0078439987 -1.2582051899 -0.4869322498 ## [457] 0.1444947920 -0.5534243884 0.2983033107 -0.1428326145 ## [461] -0.5198182309 -0.7857375254 0.3837832439 -0.0168702657 ## [465] -0.6935348957 0.2652256710 -0.1282895853 -0.3602051941 ## [469] -0.0387952526 -0.2285425672 1.5412498293 0.2851382207 ## [473] -0.1795691812 -0.8862365597 0.0255521434 0.0191702560 ## [477] 0.0391297199 -0.0821886746 -0.4744866907 -0.0903543765 ## [481] 0.1344340459 0.7385548330 0.2461695916 -0.1432994986 ## [485] -0.1665239264 -0.4416304646 0.0281973281 0.1455831253 ## [489] 0.5184380368 -0.2764909332 -0.6027750882 -0.1812660365 ## [493] -0.0213664777 0.5697969089 0.5095470917 -0.8263143266 ## [497] 0.1759317774 0.6941794950 -0.1006978334 -0.1729441085 ## [501] -1.1276162970 0.2705779803 0.4763527040 0.0590186477 ## [505] 0.2020978734 -0.3427684927 -0.4231337387 -0.3944216139 ## [509] -0.0391679958 0.4483162709 0.5359336740 -0.4007745936 ## [513] 0.1096157255 -0.4298029417 0.8680742920 -0.9313830613 ## [517] 0.4307906363 0.4060488148 -0.7984546787 -0.0262473058 ## [521] -0.9146710023 -0.0609536774 -1.8714319352 0.1466406827 ## [525] 0.1320105838 0.8504608776 0.2037323740 1.2695015432 ## [529] 0.1832101915 0.5899176872 -0.5507888820 -0.1265038705 ## [533] -1.2262699079 -0.0404702482 0.2041686885 0.4180039798 ## [537] 0.4002989819 -0.9790466950 0.5821837650 -0.8072789041 ## [541] 0.9597378161 -0.3383422635 0.8691453192 -1.0159609394 ## [545] -0.4263783024 0.6304559736 -0.9278110718 0.9320033240 ## [549] -0.2816252824 0.6990716204 -0.3979305384 0.3284719805 ## [553] -0.6872477862 1.0492555236 -0.8258176410 0.8168813771 ## [557] 1.1328667408 0.1201927121 0.0243407013 0.4729022541 ## [561] 0.6876103081 -0.1813551222 -0.4105602164 0.1327918029 ## [565] -0.2231718067 0.2942236132 -1.3121060031 -0.2398557379 ## [569] -0.7868857499 0.0678895363 -0.2486691920 0.1967878358 ## [573] -0.4060346405 -0.1943013057 -0.0138885301 0.0313341140 ## [577] 0.1897594081 0.7964003867 0.0352166648 -0.4658106305 ## [581] -0.4022089914 -0.0198711786 0.4909353061 0.9270559661 ## [585] 0.2840576575 -0.3381229380 -1.0120712220 -0.4963328912 ## [589] 0.5504807351 0.2228767648 -0.4086697790 -0.6087659371 ## [593] 0.5628717652 0.6044388852 0.3710274652 0.7545700527 ## [597] 0.0500376773 0.2816445173 1.0419846989 -0.0145418855 ## [601] 0.8537830192 -1.0648571434 0.0686649733 0.0001891041 ## [605] 0.7327489531 -0.0799992062 -0.2618261790 -0.8529338074 ## [609] 0.1475603844 -0.6047642921 -0.6227456364 0.0310490382 ## [613] -0.3318328015 0.4036378458 -0.1568071076 -0.0053422389 ## [617] 0.4754757855 -0.4126510485 -0.4331075287 0.3306699557 ## [621] 0.8765110688 -1.3142285871 -0.6750402377 -0.1409236568 ## [625] 0.3231440919 0.4787362888 0.3386685765 -0.4343137010 ## [629] -1.3990662674 -0.5263590903 -0.3292868792 -0.4093550674 ## [633] 0.6212824114 -0.3833006548 -0.5593716593 -1.1416231477 ## [637] -0.7870914605 0.7654854597 0.0587587865 0.5700404523 ## [641] 0.1287109834 -0.5270452109 -1.3676860866 0.5566170939 ## [645] 0.5683071025 -0.0810365629 -0.2668325630 0.3682712229 ## [649] 0.0727147400 0.2015323056 -0.8649531157 -1.0742827083 ## [653] -0.2065504729 -0.3524632850 -0.0257288720 -0.3324941514 ## [657] 0.8339387795 -0.6410281468 -0.6270939244 -0.1823894741 ## [661] -0.4761049718 0.2600366790 -0.9652370235 -0.3291483526 ## [665] 0.0174566209 1.1673942013 0.5540330420 1.8333018312 ## [669] -0.7787068646 -0.4776315015 0.4308268488 0.1660184766 ## [673] 0.4122080174 0.2852426002 0.3070948289 1.1950552292 ## [677] 0.6308427772 -0.3903229377 -1.5459607927 0.8091695692 ## [681] 0.7516685307 -0.7770365642 -0.3189929435 -0.1302947480 ## [685] -1.0262762648 0.2361023212 -0.3694560170 0.1616936927 ## [689] 0.8719218305 -0.6102855831 0.2151047064 -0.9445114132 ## [693] -0.5694916426 0.2307661462 0.0523110500 -0.1701321105 ## [697] 0.9356678547 -0.3726998426 0.3223382268 0.0585904190 ## [701] -0.1129642874 0.8000100919 0.3842852804 0.4955857956 ## [705] -0.3707850320 -0.0019115310 -0.2814856629 0.7304773894 ## [709] -0.4241386605 -0.4249802517 -0.4441919694 -0.3132187985 ## [713] -0.0261654007 0.0636885096 -0.4468489599 -0.0265124973 ## [717] 0.8224220258 -0.9020122655 -0.1291696421 1.1391912455 ## [721] -1.1465592886 -0.4193207371 0.3945285788 -0.3897428162 ## [725] -0.2112569183 0.0608087604 0.4168126041 -0.3386929898 ## [729] 0.2595396831 0.6184070039 0.1474886067 0.2129419865 ## [733] -0.4910574103 0.1186140712 -1.3488263286 0.4651320696 ## [737] -0.6174181872 0.1558983485 0.2990576662 -0.7187296374 ## [741] -0.5997623241 -0.5244919025 -0.7656688255 -0.2018966611 ## [745] 0.1764146585 -0.2756424559 0.3651005120 -0.2238157205 ## [749] 0.4234274192 -0.6150566348 0.2733982616 0.1827828913 ## [753] -0.0249366158 -0.6375617807 0.5005675454 0.1242340353 ## [757] 0.2721485303 -0.5906715190 0.2741992453 0.5928582562 ## [761] -0.0023797060 -0.4125981636 -0.1792646848 0.5861441205 ## [765] 0.4126354581 0.5442797839 0.0910853009 -1.1709578731 ## [769] -0.4898868278 -0.3905638583 0.2351703381 0.2848184952 ## [773] -0.1359174098 0.3874740737 -0.1664389837 0.3873047438 ## [777] 0.2104657800 -0.3104474702 -0.3032199674 0.0115996277 ## [781] -0.6946910232 -0.0809808312 -0.9296762331 -0.1472787627 ## [785] -0.7245486046 -0.0824983784 0.4544650573 0.3308300818 ## [789] -0.4933251602 -0.2167863712 -0.1691392627 -0.0640692930 ## [793] -0.9572810740 -0.8000165882 0.3327277968 0.8343161924 ## [797] 1.6144066109 0.4477711606 -0.6148369643 0.1936880230 ## [801] 0.8067927373 -0.2315305551 -0.0845560702 -0.0873207482 ## [805] 0.3210910866 -0.4550714718 -1.4539859429 0.8207531488 ## [809] -0.1018714150 -0.3292665266 -0.0908003054 0.2040799346 ## [813] 0.3181981267 0.0948678392 -0.4000266026 0.1448604219 ## [817] 0.8350318054 0.6591872207 -0.4553475878 0.2204814148 ## [821] 0.5729657569 -0.2439135145 0.3472069495 0.7088029969 ## [825] -0.6314143058 0.0277277997 -0.2574505194 -0.3675325609 ## [829] 0.6615686863 -1.0502621167 -0.2393134117 0.1585401273 ## [833] -0.2365779510 0.2983633652 -0.2588439460 -0.8901304059 ## [837] 0.1890230745 0.4184939209 -0.3700641495 1.1834258305 ## [841] 0.6440490031 -0.6828536644 -0.7041282433 1.0310109919 ## [845] -0.1005656326 0.8007270017 0.3544318317 0.5959229900 ## [849] -0.3845747884 -0.1909320692 -0.2424200352 0.5391959688 ## [853] -0.5066227320 -0.1957310535 -0.4017368778 1.3042315210 ## [857] 0.3503857757 0.6779518046 0.3258315942 0.0031012501 ## [861] -0.3808331399 0.1145344366 -0.1894171757 0.2575231365 ## [865] 0.7713537256 0.0858129649 1.0702000775 -0.8972532388 ## [869] -1.1718815880 -0.5630064822 -0.1419686397 0.3091127733 ## [873] 0.7132626117 0.6139641652 0.4487305425 0.0157445079 ## [877] 0.4929621506 -0.2992651428 -0.5307640312 0.0582860685 ## [881] 0.1341942604 0.6132864149 0.3197755655 -0.5193834776 ## [885] 0.8893456767 -0.1928430836 0.2915712580 -0.2603704628 ## [889] -0.8132040437 0.5498655987 -0.1476872290 0.5581996152 ## [893] 0.2382579673 -0.4404104781 0.0598361805 0.1887747620 ## [897] -0.8219468643 -0.3478047662 0.0458319460 1.5800035703 ## [901] -0.2320460091 -0.6845224552 -0.1853191224 0.2889384019 ## [905] 0.5860235910 0.4966134145 -0.0456674661 -0.0997055988 ## [909] -0.1078777804 -0.0243865938 1.6636369802 -0.1004061162 ## [913] 0.5979162490 0.0158834023 0.3359559579 0.0614034070 ## [917] -0.0037699480 0.3123746424 0.5963216239 0.3600436486 ## [921] -0.2828743862 0.0349327615 -0.1777128193 -0.7294253870 ## [925] -0.4103074561 -0.8882542821 0.9222909235 0.9699344353 ## [929] 0.1179900768 -0.3547420006 0.2694984370 -0.9255683506 ## [933] 0.3820931773 -0.7863965417 0.6000825215 -0.2721623687 ## [937] 0.2389786428 0.1034696263 0.0818007666 -0.9795722757 ## [941] 0.6628550872 0.8523676672 1.0098610410 0.7199951243 ## [945] -0.2530408254 0.1464290827 0.5308137978 0.6205551648 ## [949] -0.0422790776 0.0671043549 -0.8901496377 -0.0817961211 ## [953] 0.9460412880 0.3956537961 -0.3971679856 0.5767608890 ## [957] -0.4054140807 -0.1560449250 0.0815622826 0.1874972109 ## [961] 0.5993413012 -1.1183251562 0.8747810431 0.1041376548 ## [965] 0.8755941495 -1.1800592057 -1.1017712227 -1.1106228887 ## [969] -0.7936027290 -0.3844201947 -0.2776267199 -0.0818265473 ## [973] 0.1791650718 -0.3496178266 0.4514791424 0.8553189611 ## [977] 0.0003145485 -1.1001258581 0.3271437480 -0.1430247456 ## [981] 0.1407754950 -0.5376530336 -0.3665727495 0.2636373413 ## [985] 0.3526114593 -0.0845059255 -0.9485226607 1.2887687376 ## [989] 1.1367852049 -0.3075638290 0.1649577604 0.3402558134 ## [993] 0.6818976198 0.2996685942 -0.8208142403 0.3454597650 ## [997] -0.9610706589 0.2723900027 0.9551487022 0.9586076585 hist(results,breaks=30,col=&quot;pink&quot;,ylim=c(0,1),freq=F) hist(results.norm,breaks=30,col=&quot;lightgreen&quot;,freq=F,add=T) hist(results2$thetastar,breaks=30,border=&quot;purple&quot;,add=T,density=20,col=&quot;purple&quot;,freq=F) All three methods (two parametric and one non-parametric) really do give different distributions for the bootstrapped statistic, so the choice of which method is best depends a lot on the situation, how much data you have, and what you might already know about the underlying distribution. Jackknifing is just as easy at bootstrapping. Here we will do a trivial example for illustration. We will write a little function for the mean even though you could put the function in directly with ‘jackknife(x,mean)’ theta&lt;-function(x) { mean(x) } x&lt;-seq(0,9,by=1) results&lt;-jackknife(x=x,theta=theta) results ## $jack.se ## [1] 0.9574271 ## ## $jack.bias ## [1] 0 ## ## $jack.values ## [1] 5.000000 4.888889 4.777778 4.666667 4.555556 4.444444 4.333333 ## [8] 4.222222 4.111111 4.000000 ## ## $call ## jackknife(x = x, theta = theta) Why do we not have to tell the ‘jackknife’ function how many replicates to do? Let’s compare this with what we would have obtained from bootstrapping results2&lt;-bootstrap(x,1000,theta) mean(results2$thetastar)-mean(x) #this is the bias ## [1] 0.0283 sd(results2$thetastar) #the standard deviation of the theta stars is the SE of the statistic (in this case, the mean) ## [1] 0.8965896 Everything we have done to this point used the R package ‘bootstrap’ - now lets compare that with the R package ‘boot’. To avoid any confusion (a.k.a. masking) between the two packages, I recommend detaching the bootstrap package from the workspace with detach(&quot;package:bootstrap&quot;) The ‘boot’ package is now recommended over the ‘bootstrap’ package, but they give the same answers and to some extent it is personal preference which one prefers to use. We will still use the mean as the statistic of interest, but we will have to write a new function for it because the syntax of the ‘boot’ package is slightly different: library(boot) theta&lt;-function(x,index) { mean(x[index]) } boot(x,theta,R=999) ## ## ORDINARY NONPARAMETRIC BOOTSTRAP ## ## ## Call: ## boot(data = x, statistic = theta, R = 999) ## ## ## Bootstrap Statistics : ## original bias std. error ## t1* 4.5 -0.005405405 0.8687464 One of the main advantages to the ‘boot’ package over the ‘bootstrap’ package is the nicer formatting of the output. Going back to our original code, lets see how we could reproduce all of these numbers: table(sample(x,size=length(x),replace=T)) ## ## 0 3 4 6 7 9 ## 1 2 2 2 2 1 xmeans&lt;-vector(length=1000) for (i in 1:1000) { xmeans[i]&lt;-mean(sample(x,replace=T)) } mean(x) ## [1] 4.5 bias&lt;-mean(xmeans)-mean(x) se.boot&lt;-sd(xmeans) bias ## [1] -0.0241 se.boot ## [1] 0.9162034 Why do our numbers not agree exactly with those of the boot package? This is because our estimates of bias and standard error are just estimates, and they carry with them their own uncertainties. That is one of the reasons we might bother doing jackknife-after-bootstrap. The ‘boot’ package has a LOT of functionality. If we have time, we will come back to some of these more complex functions later in the semester as we cover topics like regression and glm. We’ll finish off by briefing looking over two more examples from Phillip Good’s book “Introduction to Statistics Through Resampling Methods and R/S-PLUS”: # Example #1: Use permutation methods to test the hypothesis that the treatment # does not increase survival time g.trt&lt;-c(94,197,16,38,99,141,23) g.ctr&lt;-c(52,104,146,10,51,30,40,27,46) g.all&lt;-c(g.trt,g.ctr) label&lt;-c(1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2) mean.diff.perm&lt;-c() n&lt;-1000 for (i in 1:n) { label.perm&lt;-sample(label,size=length(label),replace=F) g.trt.temp&lt;-g.all[label.perm==1] g.ctr.temp&lt;-g.all[label.perm==2] temp&lt;-mean(g.trt.temp)-mean(g.ctr.temp) mean.diff.perm&lt;-c(mean.diff.perm,temp) } test.statistic&lt;-mean(g.trt)-mean(g.ctr) test.statistic ## [1] 30.63492 # use a two tailed test, so we have to sum up over both tails! p.value&lt;-(sum(as.numeric(mean.diff.perm&gt;abs(test.statistic)))+sum(as.numeric(mean.diff.perm&lt;(-abs(test.statistic)))))/n p.value ## [1] 0.284 Do you understand what is being done here? # Example #2: Provide a 80% confidence interval for the difference in mean survival days based # on 1000 bootstrap samples g.trt&lt;-c(94,197,16,38,99,141,23) g.ctr&lt;-c(52,104,146,10,51,30,40,27,46) mean.diff.boot&lt;-c() n&lt;-1000 for (i in 1:n) { g.trt.temp&lt;-sample(g.trt, size=length(g.trt),replace=T) g.ctr.temp&lt;-sample(g.ctr, size=length(g.ctr),replace=T) temp&lt;-mean(g.trt.temp)-mean(g.ctr.temp) mean.diff.boot&lt;-c(mean.diff.boot,temp) } ll.median.ul&lt;-quantile(mean.diff.boot,probs=c(0.10,0.50,0.90)) Do you understand what is being done here? "],
["week-3-lecture.html", "5 Week 3 Lecture 5.1 Overview of probability distributions 5.2 Normal (Gaussian) Distribution 5.3 Standard Normal Distribution 5.4 Log-Normal Distribution 5.5 Intermission: Central Limit Theorem 5.6 Poisson Distribution 5.7 Binomial Distribution 5.8 Beta Distribution 5.9 Gamma Distribution 5.10 Some additional notes:", " 5 Week 3 Lecture 5.1 Overview of probability distributions We will cover 7 distributions this week, and several more next week. Please refer to the handout if univariate distributions, and note that the arrows between Normal and Standard Normal need to be reversed. For each distribution, there are five things I want you to know. 1 - Probability density function 2 - General Shape 3 - The expected value \\(E[X]\\) 4 - The variance \\(E[X-E[X]]^2\\) 5 - Relationship to other distributions What is a probability density? if \\(f(x \\mid params)\\) is a probablity density function: \\[ P(a&lt;x&lt;b)=\\int_a^bf(x \\mid params)dx \\] Probablity at a single point is always zero but probablity density is not. The probability density function is not restricted to being \\(\\le1\\) The integral over it’s range is always 1. 5.2 Normal (Gaussian) Distribution The outcome is produced by small number effects acting additively and independently. Normally distributed errors is the most common assumption of linear models. Central Limit theorem! The probability density function of the Normal distribution is given by \\[ f(x \\mid \\mu, \\sigma) = \\frac{1}{\\sqrt{2 \\pi \\sigma^2}}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}} \\] \\[ x \\in \\mathbb{R} \\\\ \\mu \\in \\mathbb{R} \\\\ \\sigma &gt; 0 \\] The shape of the Normal distribution can be illustrated by a few examples The expected value of the Normal distribution is given by \\[ \\begin{align} E[X] &amp;= \\int_{-\\infty}^{\\infty}{X \\cdot f(X)dX} \\\\ &amp;= \\int_{-\\infty}^{\\infty} x \\cdot f(x \\mid \\mu, \\sigma) = \\frac{1}{\\sqrt{2 \\pi \\sigma^2}}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}} dx \\\\ &amp;= \\mu \\end{align}\\] The variance of the Normal distribution is given by \\[ \\begin{align} Var[X] &amp;= E[(X- E[X])^2] \\\\ &amp;= E[(X - \\mu)^2] \\\\ &amp;= E[X^2] - \\mu^2 \\\\ &amp;= \\left( \\int_{-\\infty}^{\\infty} x^2 \\cdot f(x \\mid \\mu, \\sigma) = \\frac{1}{\\sqrt{2 \\pi \\sigma^2}}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}} dx \\right) - \\mu^2 \\\\ &amp;= \\sigma^2 \\end{align} \\] 5.3 Standard Normal Distribution Raw data rarely fits standard normal. Mostly useful as a theoretical construct in hypothesis testing. The probability density function of the Standard Normal distribution is given by \\[ z = \\frac{x-\\mu}{\\sigma} \\] \\[ f(z \\mid \\mu, \\sigma) = \\frac{1}{\\sqrt{2\\pi}}e^{-\\frac{1}{2}z^2} \\] The expected value and variance of the Standard Normal distribution are given by E[X] = 0 Var[X] = 1 Note that the Standard Normal distribution is a linear transformation of the Normal distribution (centered on zero with variance equal to 1). 5.4 Log-Normal Distribution The outcome is produced by small number effects acting multiplicatively and independently. Often used for things where small grows slowly and big grows quickly, such as forest fires or insurence claims. The probability density function of the Log-Normal distribution is given by \\[ \\begin{align} log(X) &amp;\\sim N(\\mu,\\sigma) \\\\ X &amp;\\sim LN(\\mu,\\sigma) \\end{align} \\] \\[ f(x \\mid \\mu, \\sigma) = \\frac{1}{\\sqrt{2 \\pi \\sigma^2}}e^{-\\frac{(log(x)-\\mu)^2}{2\\sigma^2}} \\\\ x \\in \\{0,\\infty\\} \\\\ \\mu \\in \\mathbb{R} \\\\ \\sigma &gt; 0 \\] The shape of the Log-Normal distribution can be illustrated with a few examples The expected value and variance of the Log-Normal distribution is given by \\(\\mu\\) is no longer the mean! \\[ E[X] = e^{\\mu + \\frac{\\sigma^2}{2}} \\] \\(\\sigma\\) is no longer the variance! \\[ Var[X] = e^{2(\\mu + \\sigma^2) - (2\\mu + \\sigma^2)} \\] Note that if the log of a variable (X) has a Normal distribution \\[ log(X) \\sim N(\\mu,\\sigma^{2}) \\] than the variable X follows a Log-Normal distribution. NB: Be careful when using the Log-Normal distribution. In particular, keep in mind that the sum of Log-normally distributed variables is NOT Log-Normally distributed. 5.5 Intermission: Central Limit Theorem \\[ X_1,X_2,X_3,...,X_k \\sim N(\\mu,\\sigma^2) \\\\ S_n = \\frac{1}{n} (X_1 + X_2 + X_3,...,X_k) \\\\ \\lim_{n \\to \\infty} S_n \\to N(\\mu,\\frac{\\sigma^2}{n}) \\] X is i.i.d X can be drawn from any distribution! 5.6 Poisson Distribution The Poisson distribution arises principally in 3 situations: 1 - In the description of random spatial point patterns (disease events, complete spatial randomness) 2 - As the frequency distribution of rare but independent events 3 - As the error distribution in linear models of count data The probability mass function of the Poisson distribution is given by \\[ P(x \\mid \\lambda)= \\frac{e^{-\\lambda} \\cdot \\lambda^x}{x!} \\\\ \\lambda&gt;0 \\\\ x \\in \\mathbb{N} \\cup \\{0\\} \\] Note that when variables are discrete (i.e. when the distribution only produces integer numbers), we call the probability density function a probability mass function. The PDF and PMF play the same tole in both cases. The shape of the Poisson distribution is illustrated by a few examples The expected value and variance of the Poisson distribution is given by \\[ \\begin{align} E[X] &amp;= \\sum_{x=1}^{\\infty} x \\frac{e^{-\\lambda} \\cdot \\lambda^x}{x!} \\\\ &amp;= \\lambda \\cdot e^{-\\lambda} \\cdot \\sum_{x=1}^{\\infty} x \\frac{\\lambda^{x-1}}{x!} \\\\ &amp;= \\lambda \\cdot e^{-\\lambda} \\cdot \\sum_{x=1}^{\\infty} \\frac{\\lambda^{x-1}}{(x-1)!}, y = x-1 \\\\ &amp;= \\lambda \\cdot e^{-\\lambda} \\cdot \\sum_{y=0}^{\\infty} \\frac{\\lambda^{y}}{y!} \\\\ &amp;= \\lambda \\cdot e^{-\\lambda} \\cdot e^{\\lambda} \\\\ &amp;= \\lambda\\end{align} \\] \\[ Var[X] = \\lambda \\] The Poisson distribution has the following relationship to the Normal distribution: \\[ \\lim_{\\lambda \\to \\infty} Pois(\\lambda) \\to N(\\lambda, \\lambda) \\] Note that the sum of Poisson distributed variables is itself Poisson distributed. \\[ \\begin{align} X &amp;\\sim Pois(1) \\\\ Y &amp;= \\sum_{i=1}^{\\lambda} X_i \\\\ Y &amp;\\sim Pois(\\lambda) \\end{align} \\] Applying the Central Limit Theorem \\[\\begin{align} \\bar{X} = \\frac{Y}{\\lambda} &amp;\\sim N(1,\\frac{1}{\\lambda}) \\\\ Y &amp;\\sim N(\\lambda, \\lambda) \\end{align} \\] 5.7 Binomial Distribution The probability mass function of the Binomial distribution is given by \\[ P(x \\mid p,n) = \\frac{n!}{x!-(n-x)!}p^x(1-p)^x \\\\ n \\in \\mathbb{N} \\cup \\{0\\} \\\\ x \\in \\{1,2,3,...,n\\} \\\\ p \\in [0,1] \\] The shape of the Binomial distribution is illustrated by the following examples The expected value and variance of the Binomial distribution is given by \\[ \\begin{align} E[X] &amp;= \\sum_{x=1}^n x \\frac{n!}{x!-(n-x)!}p^x(1-p)^x \\\\ &amp;=np \\\\ Var[X] &amp;= np(1-p) \\end{align} \\] The Binomial distribution has the following relationship to the Normal distribution \\[ \\lim_{n \\to \\infty} Binom(n,p) \\to N(np,np(1-p)) \\] 5.8 Beta Distribution One of the few distributions that is restricted to a finite interval (0 and 1). Can be used to model proportions. The probability density function of the Beta distribution is given by \\[ f(x \\mid \\alpha, \\beta) = \\frac{\\Gamma(\\alpha + \\beta)}{\\Gamma(\\alpha) \\Gamma(\\beta)}x^{\\alpha-1}(1-x)^{\\beta-1} \\\\ \\alpha&gt;0 \\\\ \\beta&gt;0 \\\\ x \\in (0,1) \\] Gamma Function: if n is a positive integer \\(\\Gamma(n)=(n-1)!\\) The shape of the Beta distribution is illustrated by the following examples The expected value and variance of the Beta distribution is given by \\[ \\begin{align} E[X] &amp;= \\int_0^1x\\frac{\\Gamma(\\alpha + \\beta)}{\\Gamma(\\alpha) + \\Gamma(\\beta)}x^{\\alpha-1}(1-x)^{\\beta-1}dx \\\\ &amp;= \\frac{\\alpha}{\\alpha + \\beta} \\end{align} \\] \\[ Var[X] = \\frac{\\alpha\\beta}{(\\alpha+\\beta)^2 \\cdot(\\alpha + \\beta + 1)} \\] The Beta Distribution’s relationship to the Normal and Uniform distributions are given by \\(Beta(1,1)\\) is the same as \\(Uniform(0,1)\\) \\[ f(x \\mid 1,1) = \\frac{\\Gamma(2)}{\\Gamma(1) + \\Gamma(1)}x^{0}(1-x)^{0} = 1 \\] \\[ \\lim_{\\alpha=\\beta \\to \\infty} \\to N(\\frac{1}{2}, \\frac{1}{8\\alpha + 4}) \\] 5.9 Gamma Distribution Useful for variables that have a positive skew. it is often used to model “waiting times”, such as the time before a device or machine fails. The probability density function of the Gamma distribution (not to be confused with the Gamma Function) is given by \\[ f(x \\mid \\alpha, \\beta) = \\frac{1}{\\beta^\\alpha \\Gamma(\\alpha)} x^{(\\alpha-1)} e^\\frac{-x}{\\beta} \\\\ \\alpha&gt;0 \\\\ \\beta &gt;0 \\\\ x&gt;0\\] The shape of the Gamma distribution is illustrated by the following examples The expected value and variance of the Gamma distribution is given by \\[ \\begin{align} E[X] &amp;= \\int_0^\\infty x\\frac{1}{\\beta^\\alpha \\Gamma(\\alpha)} x^{(\\alpha-1)} e^\\frac{-x}{\\beta} \\\\ &amp;= \\alpha\\beta \\end{align} \\] \\[ Var[X] = \\alpha\\beta^2 \\] The relationship between the Gamma sistribution and the Normal distribution is \\[ \\lim_{\\alpha \\to \\infty} Gamma(\\alpha,\\beta) \\to N(\\alpha \\beta,\\alpha\\beta^2) \\] 5.10 Some additional notes: Please skim through the reading that has been posted “The Algebra of Expectations”. Focus on the “rules”. I want to make sure everyone is clear on the distribution of Normal random variables. If \\[ X\\sim N(\\mu,\\sigma^{2}) \\] then the distribution of a new variable c*X (where c is a constant) is given by \\[ cX\\sim N(c\\mu,c^{2}\\sigma^{2}) \\] The mean is simply multiplied by \\(c\\), and the variance is multiplied by \\(c^{2}\\). To understand why this is, let’s first go into a more detailed derivation of the variance of the distribution of Normal random variables than we did in class. To begin with, you will need to know that one property of expectations is the following: \\[ E[ g(x) ] = \\int g(x) f(x) \\ dx \\] With this knowledge, let’s approach the derivation of the variance, where we are essentially defining \\(g(x) = (X-E[X])^2\\) and using some basic properties of algebra involving integrals. Note that in this derivation we are treating \\(E[X]\\) as a constanct, and not as a function of \\(x\\). \\[ \\begin{eqnarray} Var[X]&amp;=&amp;E[(X-E[X])^{2}] \\\\ &amp;=&amp;\\int (x - E(X))^2 f(x) \\ dx \\\\ &amp;=&amp;\\int (x^2 -2xE(X) + E(X)^2 ) f(x) \\ dx \\\\ &amp;=&amp;\\int x^2 f(x) \\ dx - 2E(X) \\int x f(x) \\ dx + \\int E(X)^2 f(x) \\ dx \\\\ &amp;=&amp; E(X^2) -2 E(X)^2 + E(X)^2 \\\\ &amp;=&amp; E(X^2) - E(X)^2 \\end{eqnarray} \\] "],
["week-3-lab-handout.html", "6 Week 3 Lab Handout 6.1 The Central Limit Theorem 6.2 Exploring the univariate distributions with R 6.3 Standard deviation vs. Standard error", " 6 Week 3 Lab Handout In lab today, we will dive into using R to understand the properties of the univariate distributions, but first we’ll take a short detour to discuss the Central Limit Theorem (or CLT). 6.1 The Central Limit Theorem QUESTION: Why is the normal distribution so fundamental to statistics? ANSWER: The central-limit theorem. Let X1, X2,…, Xn be independently and identically distributed random variables with mean \\(\\mu\\) and finite, non-zero variance \\(\\sigma^{2}\\), \\[ X_{1},X_{2},...,X_{n} \\sim N(\\mu,\\sigma^{2}) \\] and the average of these variable \\(S_{n}\\) be defined as \\[ S_{n} = \\frac{1}{n}(X_{1}+X_{2}+X_{3}+...+X_{n}) \\] Then the Central Limit Theorem states: \\[ \\lim_{n\\rightarrow\\infty} S_{n} \\rightarrow N(\\mu,\\frac{\\sigma^{2}}{n}) \\] Here I have illustrated the CLT using the normal distribution, but the variables X can be drawn from ANY distribution (as long as the X are i.i.d. from a distribution with finite mean and variance), which is remarkable. For example, X could be drawn from a Bernoulli! The CLT is a very general statement, but do not forget the requirements that the mean and standard deviation exist (i.e. are finite). The Cauchy distribution, which is used all the time in atomic physics, has NO MEAN and NO SD – therefore, the CLT would not apply. IMPORTANT SIDE NOTE: The Central Limit Theorem tells us something very important about how well we can estimate the mean of a set of random i.i.d. numbers. Our uncertainty of the mean is given by the variance of \\(S_{n}\\) \\[ \\mbox{variance of estimate of } \\mu = \\frac{s^{2}}{n} \\] where \\[ s^{2} = \\frac{(X-\\bar{X})^{2}}{n-1} \\] is our unbiased estimate of \\(\\sigma^{2}\\). Therefore, we define the STANDARD ERROR of our estimate of \\(\\mu\\) as \\[ \\mbox{s.e. of } \\mu = \\sqrt{\\frac{s^{2}}{n}} \\] Our uncertainty regarding our estimate of \\(\\mu\\) goes down as the \\(\\sqrt{n}\\). DO NOT CONFUSE STANDARD ERROR AND STANDARD DEVIATION. Standard errors are just the standard deviation of a parameter estimate, it expresses uncertainty about the estimate. Standard deviations of a population simply reflect the spread in values. As you increase sample size, standard errors (i.e. standard deviations of the parameter estimate) get smaller and smaller, but standard deviations of the population values do not get smaller with increasing sample size. 6.2 Exploring the univariate distributions with R As a review of last week’s lecture, we can ask a number of things about a statistical distribution: Look at the probability density function: What is the probability of obtaining X (discrete) or a number in the interval (X1,X2) (continuous)? Look at the cumulative probability: What is the probability of obtaining \\(X &lt; X^{*}\\)? Look at the quantiles of the distributions: The inverse of the cumulative distribution - What is \\(X^{*}\\) such that the cumulative probability of obtaining \\(X &lt; X^{*}\\) is the specified quantile? Quantiles can have any size: Quartiles, deciles, percentiles, etc. Look at samples from the distribution: What does the distribution “look like”? There are four basic functions in R: d = probability density function p = cumulative probability q = quantiles of the distribution r = random numbers generated from the distribution We combine these letters with the function names to make all the function calls: For example, Normal distribution: dnorm, pnorm, qnorm, rnorm Log-normal distribution: dlnorm, plnorm, qlnorm, rlnorm Poisson: dpois, ppois, qpois, rpois First we’ll play around with the normal distribution because we know what the answers should be. Then we’ll move onto distributions we may be less familiar with: First, lets draw a couple of random values from the standard normal. We can take 100 random draws from the Standard Normal N(0,1) using the R function ‘rnorm’. data&lt;-rnorm(100,mean=0,sd=1) head(data) ## [1] -1.3291964 -0.6199083 0.6296799 -0.8424095 2.1883484 -1.1785857 Note that you could have left off the “mean” and “sd” since R knows the order of inputs, that is you could simply write head(rnorm(100,0,1)) ## [1] 0.5084660 -1.2142886 -0.8320538 -0.3740450 -0.1875992 -0.1439310 or even head(rnorm(100)) ## [1] 2.44792090 -0.37974543 1.27822688 -0.06291265 0.24242361 0.53894558 since mean=0, sd=1 is the default. Until you are 100% comfortable with R, its better to leave all the options spelled out. Make a histogram of data hist(data) Play around with the hist command using different numbers of ‘breaks’ or try leaving that option off altogether. You will get a sense for how many breaks you need for the histogram to “look right” but I prefer to use more breaks than R defaults to. Also, compare this last plot with this one: hist(data,freq=FALSE) To really play around with these distributions, lets combine these commands into a single command: hist(rnorm(100,mean=0,sd=1),col=&quot;plum4&quot;) Play around with different means and sd and convince yourself that ‘rnorm’ really does work. You can look at the graphics options by doing ?hist and you can explore the list of named colors by typing colors() What happens if you add the flag “plot=F”? hist(rnorm(1000,mean=0,sd=1),plot=F) ## $breaks ## [1] -3.5 -3.0 -2.5 -2.0 -1.5 -1.0 -0.5 0.0 0.5 1.0 1.5 2.0 2.5 3.0 ## [15] 3.5 4.0 ## ## $counts ## [1] 1 9 17 38 98 144 185 200 151 98 40 14 2 2 1 ## ## $density ## [1] 0.002 0.018 0.034 0.076 0.196 0.288 0.370 0.400 0.302 0.196 0.080 ## [12] 0.028 0.004 0.004 0.002 ## ## $mids ## [1] -3.25 -2.75 -2.25 -1.75 -1.25 -0.75 -0.25 0.25 0.75 1.25 1.75 ## [12] 2.25 2.75 3.25 3.75 ## ## $xname ## [1] &quot;rnorm(1000, mean = 0, sd = 1)&quot; ## ## $equidist ## [1] TRUE ## ## attr(,&quot;class&quot;) ## [1] &quot;histogram&quot; Note that you can assign that to a variable and then use those results later in a calculation or another plot. Next, lets play around with pnorm quantiles&lt;-seq(-3.5,3.5,0.01) #These are the quantiles density&lt;-dnorm(quantiles,mean=0,sd=1) #dnorm gives the pdf for a given quantile plot(quantiles,density,type=&quot;l&quot;,ylab=&quot;Probability density&quot;) This is the probability density function for the standard normal. (We are getting a little ahead of ourselves because we won’t discuss graphics until next week, but this syntax is fairly straightforward.) Let’s use the same vector ‘quantiles’ and try the function pnorm: cumulative&lt;-pnorm(quantiles,mean=0,sd=1) plot(quantiles,cumulative,type=&quot;l&quot;,ylab=&quot;Probability&quot;) This gives us the cumulative distribution function! Finally, lets look at qnorm probability&lt;-seq(0,1,0.001) quantiles&lt;-qnorm(probability,mean=0,sd=1) plot(probability,quantiles,type=&quot;l&quot;,ylab=&quot;Quantiles&quot;) This plots the quantiles for each probability between 0 and 1. In other words, what value \\(Y^{*}\\) is associated with the cumulative probability of \\(X^{*}\\). Lets make sure this makes sense by plotting on top of this line another representing the quantiles for a normal distribution with smaller variance quantiles2&lt;- qnorm(probability,mean=0,sd=0.2) plot(probability,quantiles,type=&quot;l&quot;,ylab=&quot;Quantiles&quot;) lines(probability,quantiles2,col=&quot;red&quot;) Notice that because the variance of the new distribution is smaller, you get from a cumulative probability of 0 to 1 over a smaller range of values. Let’s try some discrete distributions next: count&lt;-rpois(500,lambda=3) table(count) ## count ## 0 1 2 3 4 5 6 7 8 9 10 ## 25 67 114 112 82 63 21 9 5 1 1 mean(count) ## [1] 3.044 var(count) ## [1] 2.972008 6.3 Standard deviation vs. Standard error Many people struggle with the distinction between the standard deviation of a sample (or a population), and the standard error of the mean of the sample (or population). The standard deviation is a measure of the average spread of the data. Since the standard deviation is a measure of the average spread of the data, adding more data does not appreciably change the standard deviation. (Make sure this makes sense!) The standard error can be understood as follows: If you repeated your experiment many times, and calculated the mean of each of the samples (one sample from each “experiment”), the standard deviation of the means would represent the uncertainty in the estimate of the mean coming from any one sample. The standard deviation of those means is called the standard error of the mean (or SEM). The SEM decreases as the size of each sample increases because each sample is now more representative of the underlying distribution. More precisely, the standard error is the standard deviation of the sampling distribution of a statistic. Standard errors can be calculated for any statistic. For example, if we fit a Beta(\\(\\alpha\\),\\(\\beta\\)) distribution to a dataset, we want to estimate the parameter values \\(\\hat{\\alpha}\\) and \\(\\hat{\\beta}\\) AND thier standard errors, which we might denote s.e.\\(_{\\hat{\\alpha}}\\) and s.e.\\(_{\\hat{\\beta}}\\). We can use the Poisson distribution to illustrate the difference between a standard deviation of a distribution and the standard deviation of the mean: First we want to plot the distribution for three different sample sizes: par(mfrow=c(3,1)) #Use ?par to see what this command does - more on this later sample1&lt;-rpois(1000,lambda=3) sample2&lt;-rpois(10000,lambda=3) sample3&lt;-rpois(100000,lambda=3) hist(sample1) hist(sample2) hist(sample3) sd(sample1) ## [1] 1.752607 sd(sample2) ## [1] 1.719037 sd(sample3) ## [1] 1.730586 Notice that the standard deviation has not appreciably changed as we have increased the sample size. Now lets run some code to calculate the standard error of the mean: sample.size&lt;-1000 means&lt;-c() for (i in 1:2000) { means&lt;-c(means,mean(rpois(sample.size,lambda=3))) } hist(means) s.e.1&lt;-sqrt(var(rpois(sample.size,lambda=3))/sample.size) s.e.2&lt;-sd(means) s.e.1 ## [1] 0.0544695 s.e.2 ## [1] 0.05456111 Note that the number of experiments I looped through (2000 in this case) is not relevant. It just has to be big enough that you get a sense of what the distribution of means looks like. Now go back and modify the code so that sample.size=10000 - how does that change the result? On Tuesday we discussed the probability mass function for the binomial. While an individual flip of the coin can be thought of as a success/failure, the binomial is answering the question “How many succesess do I expect if I try n times.” We can plot this for varying numbers of trials assuming p=0.5 par(mfrow=c(3,3)) p=0.5 plot(seq(0,10),dbinom(x=seq(0,10),size=1,prob=p),typ=&quot;h&quot;,lwd=5,xlab=&quot;# of successes&quot;,ylab=&quot;&quot;,main=&quot;n=1&quot;,ylim=c(0,0.6)) lines(seq(0,10,0.1),dnorm(seq(0,10,0.1),1*p,1*p*(1-p)),col=&quot;red&quot;,lwd=2) plot(seq(0,10),dbinom(x=seq(0,10),size=2,prob=p),typ=&quot;h&quot;,lwd=5,xlab=&quot;# of successes&quot;,ylab=&quot;&quot;,main=&quot;n=2&quot;,ylim=c(0,0.6)) lines(seq(0,10,0.1),dnorm(seq(0,10,0.1),2*p,2*p*(1-p)),col=&quot;red&quot;,lwd=2) plot(seq(0,10),dbinom(x=seq(0,10),size=3,prob=p),typ=&quot;h&quot;,lwd=5,xlab=&quot;# of successes&quot;,ylab=&quot;&quot;,main=&quot;n=3&quot;,ylim=c(0,0.6)) lines(seq(0,10,0.1),dnorm(seq(0,10,0.1),3*p,3*p*(1-p)),col=&quot;red&quot;,lwd=2) plot(seq(0,10),dbinom(x=seq(0,10),size=4,prob=p),typ=&quot;h&quot;,lwd=5,xlab=&quot;# of successes&quot;,ylab=&quot;&quot;,main=&quot;n=4&quot;,ylim=c(0,0.6)) lines(seq(0,10,0.1),dnorm(seq(0,10,0.1),4*p,4*p*(1-p)),col=&quot;red&quot;,lwd=2) plot(seq(0,10),dbinom(x=seq(0,10),size=5,prob=p),typ=&quot;h&quot;,lwd=5,xlab=&quot;# of successes&quot;,ylab=&quot;&quot;,main=&quot;n=5&quot;,ylim=c(0,0.6)) lines(seq(0,10,0.1),dnorm(seq(0,10,0.1),5*p,5*p*(1-p)),col=&quot;red&quot;,lwd=2) plot(seq(0,10),dbinom(x=seq(0,10),size=6,prob=p),typ=&quot;h&quot;,lwd=5,xlab=&quot;# of successes&quot;,ylab=&quot;&quot;,main=&quot;n=6&quot;,ylim=c(0,0.6)) lines(seq(0,10,0.1),dnorm(seq(0,10,0.1),6*p,6*p*(1-p)),col=&quot;red&quot;,lwd=2) plot(seq(0,10),dbinom(x=seq(0,10),size=7,prob=p),typ=&quot;h&quot;,lwd=5,xlab=&quot;# of successes&quot;,ylab=&quot;&quot;,main=&quot;n=7&quot;,ylim=c(0,0.6)) lines(seq(0,10,0.1),dnorm(seq(0,10,0.1),7*p,7*p*(1-p)),col=&quot;red&quot;,lwd=2) plot(seq(0,10),dbinom(x=seq(0,10),size=8,prob=p),typ=&quot;h&quot;,lwd=5,xlab=&quot;# of successes&quot;,ylab=&quot;&quot;,main=&quot;n=8&quot;,ylim=c(0,0.6)) lines(seq(0,10,0.1),dnorm(seq(0,10,0.1),8*p,8*p*(1-p)),col=&quot;red&quot;,lwd=2) plot(seq(0,10),dbinom(x=seq(0,10),size=9,prob=p),typ=&quot;h&quot;,lwd=5,xlab=&quot;# of successes&quot;,ylab=&quot;&quot;,main=&quot;n=9&quot;,ylim=c(0,0.6)) lines(seq(0,10,0.1),dnorm(seq(0,10,0.1),9*p,9*p*(1-p)),col=&quot;red&quot;,lwd=2) and we can see how this might change for p=0.1 par(mfrow=c(3,3)) p=0.1 plot(seq(0,10),dbinom(x=seq(0,10),size=1,prob=p),typ=&quot;h&quot;,lwd=5,xlab=&quot;# of successes&quot;,ylab=&quot;&quot;,main=&quot;n=1&quot;,ylim=c(0,0.6)) lines(seq(0,10,0.1),dnorm(seq(0,10,0.1),1*p,1*p*(1-p)),col=&quot;red&quot;,lwd=2) plot(seq(0,10),dbinom(x=seq(0,10),size=2,prob=p),typ=&quot;h&quot;,lwd=5,xlab=&quot;# of successes&quot;,ylab=&quot;&quot;,main=&quot;n=2&quot;,ylim=c(0,0.6)) lines(seq(0,10,0.1),dnorm(seq(0,10,0.1),2*p,2*p*(1-p)),col=&quot;red&quot;,lwd=2) plot(seq(0,10),dbinom(x=seq(0,10),size=3,prob=p),typ=&quot;h&quot;,lwd=5,xlab=&quot;# of successes&quot;,ylab=&quot;&quot;,main=&quot;n=3&quot;,ylim=c(0,0.6)) lines(seq(0,10,0.1),dnorm(seq(0,10,0.1),3*p,3*p*(1-p)),col=&quot;red&quot;,lwd=2) plot(seq(0,10),dbinom(x=seq(0,10),size=4,prob=p),typ=&quot;h&quot;,lwd=5,xlab=&quot;# of successes&quot;,ylab=&quot;&quot;,main=&quot;n=4&quot;,ylim=c(0,0.6)) lines(seq(0,10,0.1),dnorm(seq(0,10,0.1),4*p,4*p*(1-p)),col=&quot;red&quot;,lwd=2) plot(seq(0,10),dbinom(x=seq(0,10),size=5,prob=p),typ=&quot;h&quot;,lwd=5,xlab=&quot;# of successes&quot;,ylab=&quot;&quot;,main=&quot;n=5&quot;,ylim=c(0,0.6)) lines(seq(0,10,0.1),dnorm(seq(0,10,0.1),5*p,5*p*(1-p)),col=&quot;red&quot;,lwd=2) plot(seq(0,10),dbinom(x=seq(0,10),size=6,prob=p),typ=&quot;h&quot;,lwd=5,xlab=&quot;# of successes&quot;,ylab=&quot;&quot;,main=&quot;n=6&quot;,ylim=c(0,0.6)) lines(seq(0,10,0.1),dnorm(seq(0,10,0.1),6*p,6*p*(1-p)),col=&quot;red&quot;,lwd=2) plot(seq(0,10),dbinom(x=seq(0,10),size=7,prob=p),typ=&quot;h&quot;,lwd=5,xlab=&quot;# of successes&quot;,ylab=&quot;&quot;,main=&quot;n=7&quot;,ylim=c(0,0.6)) lines(seq(0,10,0.1),dnorm(seq(0,10,0.1),7*p,7*p*(1-p)),col=&quot;red&quot;,lwd=2) plot(seq(0,10),dbinom(x=seq(0,10),size=8,prob=p),typ=&quot;h&quot;,lwd=5,xlab=&quot;# of successes&quot;,ylab=&quot;&quot;,main=&quot;n=8&quot;,ylim=c(0,0.6)) lines(seq(0,10,0.1),dnorm(seq(0,10,0.1),8*p,8*p*(1-p)),col=&quot;red&quot;,lwd=2) plot(seq(0,10),dbinom(x=seq(0,10),size=9,prob=p),typ=&quot;h&quot;,lwd=5,xlab=&quot;# of successes&quot;,ylab=&quot;&quot;,main=&quot;n=9&quot;,ylim=c(0,0.6)) lines(seq(0,10,0.1),dnorm(seq(0,10,0.1),9*p,9*p*(1-p)),col=&quot;red&quot;,lwd=2) If you look back at our notes from Tuesday, we see that the gamma and the Poisson distributions look quite similar (ignoring that one is discrete and the other continuous). We can use R to show us the differences are: First we will draw from the Poisson distribution, then we will use R’s very handy function ‘fitdistr’ to fit the gamma distribution to that data and compare. We haven’t yet covered HOW this function works, but for now let’s just take for granted that this function is able to find the parameter estimates that will give you the best fit to your data. First, install the library ‘MASS’. library(MASS) #this loads the library into the workspace sample.pois&lt;-rpois(1000,lambda=20) fit&lt;-fitdistr(sample.pois,&quot;gamma&quot;,start=list(shape=20,scale=1)) ## Warning in densfun(x, parm[1], parm[2], ...): NaNs produced ## Warning in densfun(x, parm[1], parm[2], ...): NaNs produced ## Warning in densfun(x, parm[1], parm[2], ...): NaNs produced ## Warning in densfun(x, parm[1], parm[2], ...): NaNs produced fit ## shape scale ## 18.63709603 1.06636787 ## ( 0.82605502) ( 0.04790567) (Sometimes you get a warnings message about NAs when using fitdistr. The best explanation I can find says that this means R “encountered some difficulties during fitting”. I can find no difference in the fits when you get the warning and when you don’t, and the same sample.pois will sometimes give a warning and sometimes not, so it appears independent of the data itself. Do not ignore warnings() in R but don’t be paralized by them, especially in a context where R is searching parameter space during an optimization. Be sure to search around for an explanation and make sure you are confident that R is still giving reasonable answers.) Notice that we are fitting a gamma distribution to this data, and we specify what distribution we want to fit using the name of the distribution in quotes. Remember that rgamma can take as inputs shape,scale or shape,rate=1/scale. I am using scale as the input because it is consistent with the way I introduced the gamma distribution in class. Be aware that some people will use rate and some will use scale and you always have to check. When we print the object fit, we get the estimates and the standard errors, but at first it isn’t obvious how to extract the estimates (and errors) so we can use them in other calculations. We start by using the function names to “get inside” this object and see what it is made up of. names(fit) ## [1] &quot;estimate&quot; &quot;sd&quot; &quot;vcov&quot; &quot;loglik&quot; &quot;n&quot; We now look at fit$estimate ## shape scale ## 18.637096 1.066368 and notice that we can pull out the two estimates as fit$estimate[1] ## shape ## 18.6371 fit$estimate[2] ## scale ## 1.066368 Now we want to plot the data, and the best fit line: x.vals&lt;- seq(from=5,to=40,by=1) hist(sample.pois,breaks=x.vals) lines(x.vals,dgamma(x.vals,shape=fit$estimate[1],scale=fit$estimate[2])*1000,col=&quot;blue&quot;) Two things to note here: 1. I created x.vals just as a mechanism for plotting a relatively smooth line for the best-fit distribution 2. I multiplied for 1000 because I had originally drawn 1000 values, and this puts my best-fit line on the same scale as the histogram. NOTE: We can guess at starting values by making sure the mean and variance of the gamma match the mean and variance of the data. This method is an example of “moment matching”. In other words, we take two distributions and get a close fit between them by requiring that they have the same mean and, if possible, the same variance. We can see that if we generate data from a Poisson, it can be fit very well by a gamma distribution. It can also be fit quite well by a Normal distribution hist(sample.pois,breaks=x.vals) fit2&lt;-fitdistr(sample.pois,&quot;normal&quot;) lines(x.vals,dnorm(x.vals,mean=fit2$estimate[1],sd=fit2$estimate[2])*1000,col=&quot;red&quot;) So we have shown that given certain parameters, a Gamma distribution can approximate a Poisson, and we have shown that the Normal can approximate the draws from a Poisson distribution. This latter fact shouldn’t come as a surprise because \\[ \\lim_{\\lambda\\rightarrow\\infty} Pois(\\lambda)\\rightarrow N(\\lambda,\\lambda) \\] The function ‘fitdistr’ is one of the MOST HANDY functions that exist for probabilities in R. Notice that ‘fitdistr’ also gives the estimated standard errors in parentheses. The next few weeks will be dedicated to learning more about the interpretation and creation of these standard errors or, equivalently, confidence intervals. Finally, I want to introduce the idea of a QQ-plot. A QQ-plot has the quantiles of two distributions plotted against one another. If the two distributions are quite similar, the QQ-plot will fall roughly on the 1:1 line. We can compare the Poisson data to the gamma distribution fit using a QQ-plot of the original Poisson sample and an equally sized sample from our best-fit gamma distribution. qqplot(x=sample.pois, y=rgamma(1000,shape=fit$estimate[1],scale=fit$estimate[2])) abline(a=0,b=1,col=&quot;red&quot;,lwd=2) "]
]
